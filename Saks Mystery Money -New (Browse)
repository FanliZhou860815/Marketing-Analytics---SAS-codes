***************************************************************
***************************************************************
*********************MM MODEL2- DATA PREP**********************
***************************************************************
***************************************************************;

LIBNAME EMAIL2 'M:\Faye\Mystery Money Modeling\New_Adobe';
libname mm 'M:\Faye\Mystery Money Modeling';
libname SDDB oracle user=fayeshi pass=  path=neworacle schema='SDMRK';
libname fs 'M:\Faye\FS';


LIBNAME ANY 'M:\fanli\Mystery_Money_Modeling\ANY';
libname SALE '\\jxn-ms-sas\direct\Fanli\Sale Segment\Library';
LIBNAME ast ASTER DSN=Aster SCHEMA=dw;
LIBNAME rep ASTER DSN=Aster SCHEMA=replicator;
libname FANLI 'M:\FANLI';
libname ORDERS 'M:\ORDERS';


/*IMPORT ACTIVE EMAIL FILE*/

%LET INPUTFILE =I:\2020 Analytics\Faye\Saks Emailable Lists;
%LET ACTIVE=Saks_Email_Subscriber_20200206.csv;
/*%LET INACTIVE=MM_10_MO_INACTIVES_JULY_2019.csv;*/

/*IMPORT ACTIVE EMAIL FILE*/
data EMAIL2.ACTIVE_FILE    ;
%let _EFIERR_ = 0; /* set the ERROR detection macro variable */
infile "&INPUTFILE.\&ACTIVE."

delimiter=',' MISSOVER DSD lrecl=32767 firstobs=2;
informat EMAIL_ADDRESS $100. ;
format EMAIL_ADDRESS $100. ;
input
EMAIL_ADDRESS $
;
if _ERROR_ then call symputx('_EFIERR_',1);  /* set ERROR detection macro variable */
EMAIL_ADDRESS=UPCASE(EMAIL_ADDRESS);
FLAG='ACTIVE   ';
run;
/**/
/**/
/*data EMAIL2.INACTIVE_FILE    ;*/
/*%let _EFIERR_ = 0; /* set the ERROR detection macro variable */*/
/*infile "&INPUTFILE.\&INACTIVE."*/
/*delimiter=',' MISSOVER DSD lrecl=32767 firstobs=2;*/
/*informat EMAIL_ADDRESS $100. ;*/
/*format EMAIL_ADDRESS $100. ;*/
/*input*/
/*EMAIL_ADDRESS $*/
/*;*/
/*if _ERROR_ then call symputx('_EFIERR_',1);  /* set ERROR detection macro variable */*/
/*EMAIL_ADDRESS=UPCASE(EMAIL_ADDRESS);*/
/*FLAG='INACTIVE';*/
/*run;*/
/*;*/
;

DATA EMAIL2.CM_EMAIL_FILE;
SET EMAIL2.ACTIVE_FILE    
/*EMAIL2.INACTIVE_FILE    */
;
RUN;

PROC SQL;
CREATE TABLE EMAIL2.CM_EMAIL_FILE AS
SELECT * FROM EMAIL2.CM_EMAIL_FILE  WHERE EMAIL_ADDRESS NOT LIKE ('%S5A.COM%')
AND EMAIL_ADDRESS NOT LIKE ('%HBC.COM%');
QUIT;

PROC SQL;
CREATE TABLE EMAIL2.CM_EMAIL_FILE AS 
SELECT DISTINCT A.*, B. EMAIL_ID 
FROM EMAIL2.CM_EMAIL_FILE A INNER JOIN SDDB.EMAIL_ADDRESS B ON A.EMAIL_ADDRESS=B.EMAIL_ADDRESS;
QUIT;

PROC SORT DATA=EMAIL2.CM_EMAIL_FILE; BY EMAIL_ADDRESS;RUN;


/*ASTER PART*/
/*PULL EMAIL+DATE LEVEL AGGREGATED VARIABLES*/

/*1. DECLARE EVENT MACROS*/
DATA _null_; 
CUT_START=PUT(TODAY()-365-365, YYMMDD10.);   
CALL SYMPUTX ('CUT_START',CUT_START);
RUN;


/*proc sql; */
/*connect to ASTER as ast (DSN=Aster);*/
/*create table fact_omni_saks_sess_channel as*/
/*SELECT *FROM connection to ast (*/
/*select  */
/*session_uuid,*/
/*date_filter,*/
/*regexp_split_to_table(session_attribution_channel, ',') AS split_fruits*/
/*FROM dw.fact_omni_saks_sessions*/
/*where DATE_FILTER > (TIMESTAMP "&CUT_START.")*/
/*order by DATE_FILTER desc*/
/**/
/*);Disconnect from ast;*/
/*Quit;*/



proc sql; 
connect to ASTER as ast (DSN=Aster);
create table fact_omni_saks_page_views as
SELECT *FROM connection to ast (
select  *
/*session_uuid,*/
/*date_filter,*/
/*regexp_split_to_table(session_attribution_channel, ',') AS split_fruits*/
FROM dw.fact_omni_saks_page_views
where DATE_FILTER > (TIMESTAMP "&CUT_START.")
order by DATE_FILTER desc
limit 1000
);Disconnect from ast;
Quit;





proc sql; 
connect to ASTER as ast (DSN=Aster);
create table EMAIL2.EVENTS_SAMPLE_NAME as
SELECT *FROM connection to ast (
select DISTINCT EVENT_TYPE_ID, EVENT_NAME
from dw.fact_omni_saks_events  b 
WHERE DATE_FILTER > (TIMESTAMP "&CUT_START.")
GROUP BY 1,2
);Disconnect from ast;
Quit;



PROC SQL; SELECT DISTINCT EVENT_TYPE_ID, EVENT_NAME FROM EMAIL2.EVENTS_SAMPLE_NAME;QUIT;


DATA EMAIL2.EVENTS_SAMPLE_NAME_REV;
SET EMAIL2.EVENTS_SAMPLE_NAME;
WHERE EVENT_TYPE_ID IN (1,5,6,12,13,14,24,34) ;
RUN;

PROC SQL outobs=8; ;
SELECT DISTINCT EVENT_TYPE_ID INTO : EVENTS_IDS SEPARATED BY "," FROM EMAIL2.EVENTS_SAMPLE_NAME_REV ORDER BY EVENT_TYPE_ID;
QUIT;
%put &EVENTS_IDS.;

data EMAIL2.EVENTS_SAMPLE_NAME_REV ;
set  EMAIL2.EVENTS_SAMPLE_NAME_REV ;
varname = compress("events_cnts_"||EVENT_TYPE_ID);
run;


PROC SQL outobs=8; ;
SELECT DISTINCT VARNAME INTO : VARNAME_IDS SEPARATED BY "," FROM EMAIL2.EVENTS_SAMPLE_NAME_REV ORDER BY EVENT_TYPE_ID;
QUIT;
%put &VARNAME_IDS.;


proc sql; 
connect to ASTER as ast (DSN=Aster);
create table EMAIL2.SAKS_SESSION_FACT_MAS_A as
SELECT *FROM connection to ast (
select  
		UPPER(SESSION.EMAIL) AS EMAIL_ADDRESS,
		SESSION.DATE_FILTER,
		SESSION.session_ct,
		SESSION.device_type_ct,
		PV.PAGE_VIEWS,
		PV.PAGE_TYPE_VIEWED,
		PV.PRODUCT_VIEWED,
		PV.CATEGORY_VIEWED,
		PV.SEC_ON_PAGE,
		PV.AFF_SESSIONS,
		PV.EML_SESSIONS,
		PV.SM_SESSIONS,
		PV.DP_SESSIONS,
		PV.NS_SESSIONS,
		PV.SR_SESSIONS,
		PV.SC_SESSIONS,
		EVENTS. &VARNAME_IDS.
FROM
	(select  
					UUID.email,
					A.date_filter,
					count(distinct 	a.session_uuid) as session_ct,
					count(distinct A.device_type ) as device_type_ct
	from dw.fact_omni_saks_app_sessions A
	INNER JOIN 
			(SELECT DISTINCT VISITOR_DEVICE_UUID, VISITOR_UUID, EMAIL 
			FROM dw.dim_visitor_devices
			 WHERE TRIM(EMAIL) <> "" AND SOURCE = 'saks_app') AS UUID 
	ON a.VISITOR_DEVICE_UUID = UUID. VISITOR_DEVICE_UUID 
	WHERE A.DATE_FILTER 	>= (TIMESTAMP "&CUT_START.") 
	GROUP BY EMAIL,DATE_FILTER
	)  AS SESSION
		

LEFT JOIN
	(SELECT
		UUID.EMAIL,
		VIEWS.DATE_FILTER,
		SUM(VIEWS.PAGE_VIEWS) AS PAGE_VIEWS,
		SUM(VIEWS.PAGE_TYPE_VIEWED) AS PAGE_TYPE_VIEWED,
		SUM(VIEWS.product_viewed) AS product_viewed,
		SUM(VIEWS.category_viewed) AS category_viewed,
		SUM(VIEWS.SEC_ON_PAGE) AS SEC_ON_PAGE,
		SUM(VIEWS.AFF_SESSIONS) AS AFF_SESSIONS,
		SUM(VIEWS.EML_SESSIONS) AS EML_SESSIONS,
		SUM(VIEWS.SM_SESSIONS) AS SM_SESSIONS,
		SUM(VIEWS.DP_SESSIONS) AS DP_SESSIONS,
		SUM(VIEWS.NS_SESSIONS) AS NS_SESSIONS,
		SUM(VIEWS.SR_SESSIONS) AS SR_SESSIONS,
		SUM(VIEWS.SC_SESSIONS) AS SC_SESSIONS
	FROM 
		(SELECT VISITOR_DEVICE_UUID, 
				SESSION_UUID,
				DATE_FILTER,
				COUNT(page_view_uuid) AS PAGE_VIEWS,
				COUNT(DISTINCT PAGE_TYPE) AS PAGE_TYPE_VIEWED,
				COUNT(DISTINCT PRODUCT_CODE) AS product_viewed,
				COUNT(DISTINCT PRODUCT_CATEGORY) AS category_viewed,
				SUM(sec_on_page) AS SEC_ON_PAGE,
				COUNT(CASE WHEN MARKETING_CHANNEL IN ('affiliates') THEN  SESSION_UUID END) AS AFF_SESSIONS,
				COUNT(CASE WHEN MARKETING_CHANNEL IN ('email') THEN  SESSION_UUID END) AS EML_SESSIONS,
				COUNT(CASE WHEN MARKETING_CHANNEL IN ('social media','social media organic') THEN SESSION_UUID END) AS SM_SESSIONS,
				COUNT(CASE WHEN MARKETING_CHANNEL IN ('banner click') THEN  SESSION_UUID END) AS DP_SESSIONS,
				COUNT(CASE WHEN MARKETING_CHANNEL IN ('natural search') THEN  SESSION_UUID END) AS NS_SESSIONS,
				COUNT(CASE WHEN MARKETING_CHANNEL IN ('search') THEN  SESSION_UUID END) AS SR_SESSIONS,
				COUNT(CASE WHEN MARKETING_CHANNEL IN ('shopping comparison') THEN  SESSION_UUID END) AS SC_SESSIONS
		FROM dw.fact_omni_saks_app_page_views  
		WHERE 
			DATE_FILTER 	>= (TIMESTAMP "&CUT_START.")
			AND LOWER(page_type) IN ('product detail','quick look','sale array','search','editorial','checkout','home page','brand','brand array')
		GROUP BY 
			VISITOR_DEVICE_UUID, 
			SESSION_UUID,
			DATE_FILTER
			)  VIEWS
		INNER JOIN 
			(SELECT DISTINCT VISITOR_DEVICE_UUID, VISITOR_UUID, EMAIL FROM dw.dim_visitor_devices
			 WHERE TRIM(EMAIL) <> "" AND SOURCE = 'saks_app') AS UUID 
		ON VIEWS.VISITOR_DEVICE_UUID = UUID. VISITOR_DEVICE_UUID 
	GROUP BY 
		UUID.EMAIL,
		VIEWS.DATE_FILTER ) AS PV
ON SESSION.EMAIL=PV.EMAIL AND SESSION.DATE_FILTER=PV.DATE_FILTER

LEFT JOIN 

	pivot(
	ON ( SELECT UUID.EMAIL,DATE_FILTER,EVENT_TYPE_ID, SUM(EVENTS_CNTS) AS EVENTS_CNTS
		 FROM 
			(select  
				SESSION_UUID,
				VISITOR_DEVICE_UUID,
				DATE_FILTER,
				EVENT_TYPE_ID, 
				COUNT(DISTINCT  EVENT_UUID) AS EVENTS_CNTS
		 	from dw.fact_omni_saks_app_events  events
			where 
				DATE_FILTER 	>= (TIMESTAMP "&CUT_START.")
				AND PRODUCT_CODE IS NOT NULL 
				AND EVENT_TYPE_ID IN (&EVENTS_IDS.)
			group by SESSION_UUID, VISITOR_DEVICE_UUID, DATE_FILTER,EVENT_TYPE_ID) EVENTS  
		 INNER JOIN 
			(SELECT DISTINCT VISITOR_DEVICE_UUID, VISITOR_UUID, EMAIL FROM dw.dim_visitor_devices
			 WHERE TRIM(EMAIL) <> "" AND SOURCE = 'saks_app') AS UUID ON EVENTS.VISITOR_DEVICE_UUID = UUID. VISITOR_DEVICE_UUID 
		 GROUP BY UUID.EMAIL,DATE_FILTER,EVENT_TYPE_ID
	)
	PARTITION BY EMAIL,DATE_FILTER
	ORDER BY EVENT_TYPE_ID::varchar
	PARTITIONS('EMAIL','DATE_FILTER')
	PIVOT_KEYS(&EVENTS_IDS.)
	PIVOT_COLUMN('EVENT_TYPE_ID')
	METRICS('EVENTS_CNTS')
	)    AS EVENTS 
ON 	SESSION.EMAIL= EVENTS.EMAIL AND SESSION.DATE_FILTER= EVENTS.DATE_FILTER

)
;
Disconnect from ast;
Quit;

proc sql; 
connect to ASTER as ast (DSN=Aster);
create table EMAIL2.SAKS_SESSION_FACT_MASTER as
SELECT *FROM connection to ast (
select  
		UPPER(SESSION.EMAIL) AS EMAIL_ADDRESS,
		SESSION.DATE_FILTER,
		SESSION.session_ct,
		SESSION.device_type_ct,
		PV.PAGE_VIEWS,
		PV.PAGE_TYPE_VIEWED,
		PV.PRODUCT_VIEWED,
		PV.CATEGORY_VIEWED,
		PV.SEC_ON_PAGE,
		PV.AFF_SESSIONS,
		PV.EML_SESSIONS,
		PV.SM_SESSIONS,
		PV.DP_SESSIONS,
		PV.NS_SESSIONS,
		PV.SR_SESSIONS,
		PV.SC_SESSIONS,
		EVENTS. &VARNAME_IDS.
FROM
	(select  
					UUID.email,
					A.date_filter,
					count(distinct 	a.session_uuid) as session_ct,
					count(distinct A.device_type ) as device_type_ct
	from dw.fact_omni_saks_sessions A
	INNER JOIN 
			(SELECT DISTINCT VISITOR_DEVICE_UUID, VISITOR_UUID, EMAIL FROM dw.dim_visitor_devices
			 WHERE TRIM(EMAIL) <> "" AND SOURCE = 'saks') AS UUID 
	ON a.VISITOR_DEVICE_UUID = UUID. VISITOR_DEVICE_UUID 
	WHERE A.DATE_FILTER 	>= (TIMESTAMP "&CUT_START.") 
	GROUP BY EMAIL,DATE_FILTER
	)  AS SESSION
		

LEFT JOIN
	(SELECT
		UUID.EMAIL,
		VIEWS.DATE_FILTER,
		SUM(VIEWS.PAGE_VIEWS) AS PAGE_VIEWS,
		SUM(VIEWS.PAGE_TYPE_VIEWED) AS PAGE_TYPE_VIEWED,
		SUM(VIEWS.product_viewed) AS product_viewed,
		SUM(VIEWS.category_viewed) AS category_viewed,
		SUM(VIEWS.SEC_ON_PAGE) AS SEC_ON_PAGE,
		SUM(VIEWS.AFF_SESSIONS) AS AFF_SESSIONS,
		SUM(VIEWS.EML_SESSIONS) AS EML_SESSIONS,
		SUM(VIEWS.SM_SESSIONS) AS SM_SESSIONS,
		SUM(VIEWS.DP_SESSIONS) AS DP_SESSIONS,
		SUM(VIEWS.NS_SESSIONS) AS NS_SESSIONS,
		SUM(VIEWS.SR_SESSIONS) AS SR_SESSIONS,
		SUM(VIEWS.SC_SESSIONS) AS SC_SESSIONS
	FROM 
		(SELECT VISITOR_DEVICE_UUID, 
				SESSION_UUID,
				DATE_FILTER,
				COUNT(page_view_uuid) AS PAGE_VIEWS,
				COUNT(DISTINCT PAGE_TYPE) AS PAGE_TYPE_VIEWED,
				COUNT(DISTINCT PRODUCT_CODE) AS product_viewed,
				COUNT(DISTINCT PRODUCT_CATEGORY) AS category_viewed,
				SUM(sec_on_page) AS SEC_ON_PAGE,
				COUNT(CASE WHEN MARKETING_CHANNEL IN ('affiliates') THEN  SESSION_UUID END) AS AFF_SESSIONS,
				COUNT(CASE WHEN MARKETING_CHANNEL IN ('email') THEN  SESSION_UUID END) AS EML_SESSIONS,
				COUNT(CASE WHEN MARKETING_CHANNEL IN ('social media','social media organic') THEN SESSION_UUID END) AS SM_SESSIONS,
				COUNT(CASE WHEN MARKETING_CHANNEL IN ('banner click') THEN  SESSION_UUID END) AS DP_SESSIONS,
				COUNT(CASE WHEN MARKETING_CHANNEL IN ('natural search') THEN  SESSION_UUID END) AS NS_SESSIONS,
				COUNT(CASE WHEN MARKETING_CHANNEL IN ('search') THEN  SESSION_UUID END) AS SR_SESSIONS,
				COUNT(CASE WHEN MARKETING_CHANNEL IN ('shopping comparison') THEN  SESSION_UUID END) AS SC_SESSIONS
		FROM dw.fact_omni_saks_page_views  
		WHERE 
			DATE_FILTER 	>= (TIMESTAMP "&CUT_START.")
			AND LOWER(page_type) IN ('product detail','quick look','sale array','search','editorial','checkout','home page','brand','brand array')
		GROUP BY 
			VISITOR_DEVICE_UUID, 
			SESSION_UUID,
			DATE_FILTER
			)  VIEWS
		INNER JOIN 
			(SELECT DISTINCT VISITOR_DEVICE_UUID, VISITOR_UUID, EMAIL FROM dw.dim_visitor_devices
			 WHERE TRIM(EMAIL) <> "" AND SOURCE = 'saks') AS UUID 
		ON VIEWS.VISITOR_DEVICE_UUID = UUID. VISITOR_DEVICE_UUID 
	GROUP BY 
		UUID.EMAIL,
		VIEWS.DATE_FILTER ) AS PV
ON SESSION.EMAIL=PV.EMAIL AND SESSION.DATE_FILTER=PV.DATE_FILTER

LEFT JOIN 

	pivot(
	ON ( SELECT UUID.EMAIL,DATE_FILTER,EVENT_TYPE_ID, SUM(EVENTS_CNTS) AS EVENTS_CNTS
		 FROM 
			(select  
				SESSION_UUID,
				VISITOR_DEVICE_UUID,
				DATE_FILTER,
				EVENT_TYPE_ID, 
				COUNT(DISTINCT  EVENT_UUID) AS EVENTS_CNTS
		 	from dw.fact_omni_saks_events  events
			where 
				DATE_FILTER 	>= (TIMESTAMP "&CUT_START.")
				AND PRODUCT_CODE IS NOT NULL 
				AND EVENT_TYPE_ID IN (&EVENTS_IDS.)
			group by SESSION_UUID, VISITOR_DEVICE_UUID, DATE_FILTER,EVENT_TYPE_ID) EVENTS  
		 INNER JOIN 
			(SELECT DISTINCT VISITOR_DEVICE_UUID, VISITOR_UUID, EMAIL FROM dw.dim_visitor_devices
			 WHERE TRIM(EMAIL) <> "" AND SOURCE = 'saks') AS UUID ON EVENTS.VISITOR_DEVICE_UUID = UUID. VISITOR_DEVICE_UUID 
		 GROUP BY UUID.EMAIL,DATE_FILTER,EVENT_TYPE_ID
	)
	PARTITION BY EMAIL,DATE_FILTER
	ORDER BY EVENT_TYPE_ID::varchar
	PARTITIONS('EMAIL','DATE_FILTER')
	PIVOT_KEYS(&EVENTS_IDS.)
	PIVOT_COLUMN('EVENT_TYPE_ID')
	METRICS('EVENTS_CNTS')
	)    AS EVENTS 
ON 	SESSION.EMAIL= EVENTS.EMAIL AND SESSION.DATE_FILTER= EVENTS.DATE_FILTER

)
;
Disconnect from ast;
Quit;





/*  45:27.86*/
/* 79621556*/

data EMAIL2.SAKS_SESSION_FACT_MASTER;set EMAIL2.SAKS_SESSION_FACT_MASTER;
device_type='desktop';
run;
data EMAIL2.SAKS_SESSION_FACT_MAS_A;set EMAIL2.SAKS_SESSION_FACT_MAS_A;
device_type='app';
run;


proc append base= EMAIL2.SAKS_SESSION_FACT_MASTER
data=EMAIL2.SAKS_SESSION_FACT_MAS_A force;
run;



proc sql;
create table email2.saks_Session_Fact_master_Sum as
select 
	distinct 
		email_address, date_filter,
		case when count(distinct device_type) =2 then 1 else 0 end as cross_device_indicator,
		sum(session_ct) as session_Ct,
		sum(device_Type_ct) as device_Type_ct,
		sum(page_views) as page_views,
		sum(page_type_viewed) as page_type_viewed,
		sum(product_viewed) as product_viewed,
		sum(category_viewed) as category_viewed,
		sum(sec_on_page) as sec_on_page,
		sum(aff_sessions) as aff_sessions,
		sum(eml_sessions) as eml_sessions,
		sum(sm_sessions) as sm_sessions,
		sum(dp_sessions) as dp_sessions,
		sum(ns_sessions) as ns_sessions,
		sum(sr_sessions) as sr_sessions,
		sum(sc_sessions) as sc_sessions,
		sum(events_cnts_1) as events_cnts_1,
		sum(events_cnts_5) as events_cnts_5,
		sum(events_cnts_6) as events_cnts_6,
		sum(events_cnts_12) as events_cnts_12,
		sum(events_cnts_13) as events_cnts_13,
		sum(events_cnts_14) as events_cnts_14,
		sum(events_cnts_24) as events_cnts_24,
		sum(events_cnts_34) as events_cnts_34
from EMAIL2.SAKS_SESSION_FACT_MASTER
group by email_address, date_filter;
quit;




/*COMPLETE PURCHASE FLAG*/
/*1. PULL EMAIL ADDRESS WITH PURCHASE FROM SDMRK*/
/*transactions after 2017/01/01*/
PROC SQL;
CREATE TABLE ORDERS AS
SELECT DISTINCT
INDIVIDUAL_ID,
ORDER_NUMBER,
ORDERDATE
FROM SDDB.ORDERS
WHERE INDIVIDUAL_ID  NOT IN (.,0,999999999) AND ORDER_NUMBER IS NOT NULL AND DATEPART(ORDERDATE) GE &CUT_START. ;
QUIT;

PROC SQL;
CREATE TABLE CUSTOMER AS
SELECT DISTINCT 
INDIVIDUAL_ID,
EMAIL_ADDRESS
FROM SDDB.CUSTOMER 
WHERE INDIVIDUAL_ID NOT IN (.,0,999999999) AND EMAIL_ADDRESS IS NOT NULL;
QUIT;


proc sql;
create table orders_id_maxdt as
select distinct
individual_id,
max(datepart(orderdate)) as max_order_dt format date9.
from orders
group by individual_id;
quit;

PROC SQL;
CREATE TABLE email2.orders_email_maxdt AS
SELECT DISTINCT
B.EMAIL_ADDRESS,
max(max_order_dt) as max_order_dt format date9. 
FROM orders_id_maxdt A
INNER JOIN customer B
ON A.INDIVIDUAL_ID=B.INDIVIDUAL_ID
group by 1;
QUIT;



/*2. PULL EMAIL ADDRESS WITH PURCHASE FROM ASTER*/
/*PURCHASE FLAG FROM BROWSE DATA: EMAIL + DATE*/
proc sql; 
connect to ASTER as ast (DSN=Aster);
create table EMAIL2.PURCHASED_FLAG_BROWSE as
SELECT *FROM connection to ast (
SELECT EMAIL, ORDER_NUMBER, DATE_FILTER 
	FROM 
		(SELECT  DISTINCT 
				VISITOR_DEVICE_UUID,
				CAST(VALUE1 AS INTEGER) AS ORDER_NUMBER,
				DATE_FILTER
		 	FROM dw.fact_omni_saks_events  events
			where 
				 EVENT_TYPE_ID = 9 
				 AND DATE_FILTER 	>= (TIMESTAMP "&CUT_START.")
				AND VALUE1 IS NOT NULL) AS CT
		INNER JOIN 
			(SELECT DISTINCT VISITOR_DEVICE_UUID, VISITOR_UUID, EMAIL FROM dw.dim_visitor_devices
			 WHERE TRIM(EMAIL) <> "" AND SOURCE = 'saks') AS UUID 
		ON CT.VISITOR_DEVICE_UUID = UUID. VISITOR_DEVICE_UUID 
UNION
SELECT EMAIL, ORDER_NUMBER, DATE_FILTER 
	FROM 
		(SELECT  DISTINCT 
				VISITOR_DEVICE_UUID,
				CAST(VALUE1 AS INTEGER) AS ORDER_NUMBER,
				DATE_FILTER
		 	FROM dw.fact_omni_saks_APP_events  events
			where 
				 EVENT_TYPE_ID = 9 
				 AND DATE_FILTER 	>= (TIMESTAMP "&CUT_START.")
				AND VALUE1 IS NOT NULL) AS CT
		INNER JOIN 
			(SELECT DISTINCT VISITOR_DEVICE_UUID, VISITOR_UUID, EMAIL FROM dw.dim_visitor_devices
			 WHERE TRIM(EMAIL) <> "" AND SOURCE = 'saks_app') AS UUID 
		ON CT.VISITOR_DEVICE_UUID = UUID. VISITOR_DEVICE_UUID 
) ;
Disconnect from ast;
Quit;

proc sql;
create table EMAIL2.PURCHASED_FLAG_BROWSE_maxdt as
select distinct
upcase(email) as email_address,
max(datepart(DATE_FILTER)) as max_order_dt format date9.
from EMAIL2.PURCHASED_FLAG_BROWSE 
group by email;
quit;


PROC SQL;
CREATE TABLE EMAIL2.EMAIL_DT_W_ORDER AS
SELECT DISTINCT
EMAIL_ADDRESS,
MAX_ORDER_DT
FROM EMAIL2.ORDERS_EMAIL_MAXDT
UNION
SELECT DISTINCT
EMAIL_ADDRESS,
MAX_ORDER_DT
FROM EMAIL2.PURCHASED_FLAG_BROWSE_MAXDT;
QUIT;

PROC SQL;
CREATE TABLE EMAIL2.EMAIL_DT_W_ORDER AS
SELECT DISTINCT
EMAIL_ADDRESS,
MAX(MAX_ORDER_DT) AS MAX_ORDER_DT FORMAT DATE9.,
1 AS PURCHASED_FLAG
FROM EMAIL2.EMAIL_DT_W_ORDER
GROUP BY 1;
QUIT;


PROC SORT DATA=EMAIL2.saks_Session_Fact_master_Sum; BY EMAIL_ADDRESS;RUN;
PROC SORT DATA=EMAIL2.CM_EMAIL_FILE; BY EMAIL_ADDRESS;RUN;

DATA EMAIL2.SAKS_SESSION_FACT_ACTIVE ;
MERGE EMAIL2.saks_Session_Fact_master_Sum (IN=A) EMAIL2.CM_EMAIL_FILE (IN=B);
BY EMAIL_ADDRESS;
IF A AND B;
RUN;


PROC SQL;
CREATE TABLE EMAIL2.EMAIL_W_PF_CUTOFF AS
SELECT DISTINCT
B.EMAIL_ADDRESS,
MAX(A.MAX_ORDER_DT) AS CUTOFF_DT FORMAT DATE9.,
1 AS RESPONDER
FROM EMAIL2.EMAIL_DT_W_ORDER  A 
INNER JOIN EMAIL2.SAKS_SESSION_FACT_ACTIVE B
ON A.EMAIL_ADDRESS=B.EMAIL_ADDRESS
GROUP BY A.EMAIL_ADDRESS;
QUIT;
/*40min*/

PROC SQL;
CREATE TABLE EMAIL2.EMAIL_WO_PF_CUTOFF AS
SELECT DISTINCT
EMAIL_ADDRESS,
MAX(DATEPART(DATE_FILTER)) AS CUTOFF_DT FORMAT DATE9.,
0 AS RESPONDER
FROM EMAIL2.SAKS_SESSION_FACT_ACTIVE
WHERE EMAIL_ADDRESS NOT IN (SELECT EMAIL_ADDRESS FROM EMAIL2.EMAIL_W_PF_CUTOFF)
GROUP BY EMAIL_ADDRESS;
QUIT;
/*9min*/



DATA EMAIL2.EMAIL_CUTOFF;
SET EMAIL2.EMAIL_W_PF_CUTOFF
	EMAIL2.EMAIL_WO_PF_CUTOFF ;
RUN;
/* 1930598*/

PROC SORT DATA=EMAIL2.EMAIL_CUTOFF; BY EMAIL_ADDRESS;RUN;
PROC SORT DATA=EMAIL2.CM_EMAIL_FILE; BY EMAIL_ADDRESS;RUN;


DATA EMAIL2.EMAIL_ID_CUTOFF ;
MERGE EMAIL2.EMAIL_CUTOFF (IN=A) EMAIL2.CM_EMAIL_FILE (IN=B);
BY EMAIL_ADDRESS;
IF A AND B;
RUN;



PROC SORT DATA=EMAIL2.EMAIL_CUTOFF; BY EMAIL_ADDRESS;RUN;
PROC SORT DATA=EMAIL2.SAKS_SESSION_FACT_ACTIVE; BY EMAIL_ADDRESS;RUN;

DATA EMAIL2.SAKS_SESSION_ACTIVE_CUTOFF ;
MERGE EMAIL2.SAKS_SESSION_FACT_ACTIVE (IN=A) EMAIL2.EMAIL_CUTOFF (IN=B);
BY EMAIL_ADDRESS;
IF A AND B;
RUN;



DATA EMAIL2.SAKS_SESSION_ACTIVE_CUTOFF_90D  ;
SET  EMAIL2.SAKS_SESSION_ACTIVE_CUTOFF  ;
WHERE datepart(date_filter)<CUTOFF_DT 
	  AND ABS(INTCK('DAY',DATEPART(date_filter) ,CUTOFF_DT))<=90;
RUN;


PROC SQL;
SELECT DISTINCT 
RESPONDER, 
COUNT(DISTINCT EMAIL_ADDRESS) AS EMLS,
COUNT(DISTINCT EMAIL_ID) AS EMAIL_ID
FROM EMAIL2.SAKS_SESSION_ACTIVE_CUTOFF_90D 
GROUP BY 1;
QUIT;

/*RESPONDER EMLS EMAIL_ID */
/*0 451591 451591 */
/*1 671519 671519 */




PROC CONTENTS DATA=EMAIL2.SAKS_SESSION_ACTIVE_CUTOFF_90D; RUN;



PROC SQL;
CREATE TABLE EMAIL2.SAKS_SESSION_ACTIVE_90D_SUMMARY AS
SELECT
	DISTINCT 
		EMAIL_ID,
		CUTOFF_DT,
		RESPONDER,
		MAX(DATEPART(DATE_FILTER)) AS LAST_BROWSE_DT FORMAT DATE9.,
		MAX(cross_device_indicator) AS cross_device_indicator,
		SUM(SESSION_CT) AS SESSION_CNTS,
		SUM(device_type_ct) AS DEVICE_TYPE_CNTS,
		SUM(SEC_ON_PAGE) AS SEC_ON_PAGE,
		SUM(PAGE_VIEWS) AS PAGE_VIEWS,
		SUM(PAGE_TYPE_VIEWED) AS PAGE_TYPE_VIEWED,
		SUM(PRODUCT_VIEWED) AS PRODUCT_VIEWED,
		SUM(CATEGORY_VIEWED) AS CATEGORY_VIEWED,
		SUM(AFF_SESSIONS) AS AFF_SESSIONS,
		SUM(EML_SESSIONS) AS EML_SESSIONS,
		SUM(SM_SESSIONS) AS SM_SESSIONS,
		SUM(DP_SESSIONS) AS DP_SESSIONS,
		SUM(NS_SESSIONS) AS NS_SESSIONS,
		SUM(SR_SESSIONS) AS SR_SESSIONS,
		SUM(SC_SESSIONS) AS SC_SESSIONS,
		SUM(events_cnts_1) AS REFINE_EVENT,
		SUM(events_cnts_5) AS COLOR_EVENT,
		SUM(events_cnts_6) AS SIZE_EVENT,
		SUM(events_cnts_12) AS ADDTOBAG_EVENT,
		SUM(events_cnts_13) AS WAITLIST_EVENT,
		SUM(events_cnts_14) AS VIDEO_EVENT,
		SUM(events_cnts_24) AS ALTERIMG_EVENT,
		SUM(events_cnts_34) AS ADDTOFAV_EVENT
FROM
	EMAIL2.SAKS_SESSION_ACTIVE_CUTOFF_90D
GROUP BY 
	EMAIL_ID , CUTOFF_DT, RESPONDER;
QUIT;

DATA EMAIL2.SAKS_SESSION_ACTIVE_90D_SUMMARY;
SET EMAIL2.SAKS_SESSION_ACTIVE_90D_SUMMARY ;
TSL_BROWSE =ABS(INTCK('DAY',(CUTOFF_DT),LAST_BROWSE_DT));
RUN;

/*END OF PULLING BROWSE DATA*/

/*START OF ONLINE TRANSACTION AGGREGATION*/
PROC SQL;
CREATE TABLE EMAIL_IND AS
SELECT
	DISTINCT INDIVIDUAL_ID, EMAIL_ID
FROM
	SDDB.CUSTOMER A 
	INNER JOIN SDDB.EMAIL_ADDRESS B ON A.EMAIL_ADDRESS=B.EMAIL_ADDRESS
	INNER JOIN EMAIL2.ACTIVE_FILE  C ON B. EMAIL_ADDRESS=C.EMAIL_ADDRESS;
QUIT;

PROC SQL;
CREATE TABLE EMAIL_IND AS
SELECT DISTINCT *
FROM EMAIL_IND 
GROUP BY INDIVIDUAL_ID
HAVING COUNT(DISTINCT EMAIL_ID ) <=10;
QUIT;

PROC SQL;
CREATE TABLE EMAIL_IND_ORD AS
SELECT
	A.*, C.*
FROM
	MM.ORDERS A 
	INNER JOIN EMAIL_IND B ON A.INDIVIDUAL_ID=B.INDIVIDUAL_ID
	INNER JOIN EMAIL2.EMAIL_ID_CUTOFF C ON C.EMAIL_ID=B.EMAIL_ID;
QUIT;

DATA EMAIL_IND_ORD_CUT;
SET  EMAIL_IND_ORD;
WHERE (ORDERDATE) <(CUTOFF_DT);
RUN;

PROC SQL;
CREATE TABLE EMAIL_IND_ORD_CUT AS 
SELECT
	A.*, 
	B.MONTH_NUMBER AS ORD_MTH LABEL 'ORD_MTH', 
	B.YEAR AS ORD_YR LABEL 'ORD_YR', 
	C.MONTH_NUMBER AS CUT_MTH LABEL 'CUT_MTH'
FROM
	EMAIL_IND_ORD_CUT A 
	INNER JOIN FANLI.WEEKLY_CALENDAR B ON A.ORDERDATE = B.DATE
	INNER JOIN FANLI.WEEKLY_CALENDAR C ON (A.CUTOFF_DT) = C.DATE
;
QUIT;

DATA EMAIL_IND_ORD_CUT;
SET  EMAIL_IND_ORD_CUT;
ORDER_GAP=ABS(INTCK('MONTH',(CUTOFF_DT), ORDERDATE));
RUN;

PROC SQL;
CREATE TABLE EMAIL2.EMAIL_TRAN_SUMMARY AS
SELECT
	DISTINCT 
		EMAIL_ID,
		RESPONDER,
		CUTOFF_DT,
		MIN(ORDERDATE) AS FIRST_ORDER_DT FORMAT DATE9.,
		MAX(ORDERDATE) AS LAST_ORDER_DT FORMAT DATE9.,
		COUNT(DISTINCT ORDER_NUMBER) AS ORDERS,
		SUM(DEMAND_DOLLARS)/ COUNT(DISTINCT ORDER_NUMBER)  AS AOV,
		SUM(CASE WHEN ORDER_LINE_STATUS ='D' THEN DEMAND_DOLLARS-(ITEM_COST * DEMAND_UNITS) END) / SUM(CASE WHEN ORDER_LINE_STATUS ='D' THEN DEMAND_DOLLARS END) AS GM_RATE,
		SUM(CASE WHEN ORDER_LINE_STATUS ='R' THEN DEMAND_DOLLARS END) / SUM(DEMAND_DOLLARS) AS RTN_RATE,
		COUNT(DISTINCT (CASE WHEN CUT_MTH= ORD_MTH THEN ORD_YR END) ) AS PRE_MTH_TIMES,
		COUNT(DISTINCT CATEGORY) AS CATEGORIES
FROM
	EMAIL_IND_ORD_CUT
GROUP BY 
	EMAIL_ID;
QUIT;

DATA EMAIL2.EMAIL_TRAN_SUMMARY ;
SET  EMAIL2.EMAIL_TRAN_SUMMARY ;
TSL_PURCHASE = ABS(INTCK('MONTH',LAST_ORDER_DT,(CUTOFF_DT)));
TSF_PURCHASE = ABS(INTCK('MONTH',FIRST_ORDER_DT,(CUTOFF_DT)));
RUN;


PROC SQL;
CREATE TABLE EMAIL2.EMAIL_TRAN_SUMMARY_PRE_12M AS
SELECT
	DISTINCT 
		EMAIL_ID,
		RESPONDER,
		CUTOFF_DT,
		COUNT(DISTINCT ORDER_NUMBER) AS ORDERS_PRE_12,
		SUM(DEMAND_DOLLARS) AS DEMAND_PRE_12,
		SUM(CASE WHEN ORDER_LINE_STATUS ='D' THEN DEMAND_DOLLARS-(ITEM_COST * DEMAND_UNITS) END) / SUM(CASE WHEN ORDER_LINE_STATUS ='D' THEN DEMAND_DOLLARS END) AS GM_RATE_PRE_12,
		COUNT(DISTINCT CATEGORY) AS CATEGORIES_PRE12
FROM
	EMAIL_IND_ORD_CUT
WHERE
	ORDER_GAP<=12
GROUP BY 
	EMAIL_ID;
QUIT;

DATA EMAIL2.EMAIL_TRAN_SUMMARY;
MERGE EMAIL2.EMAIL_TRAN_SUMMARY(IN=A)
	  EMAIL2.EMAIL_TRAN_SUMMARY_PRE_12M(IN=B);
BY EMAIL_ID RESPONDER CUTOFF_DT;
IF A ;
RUN;

DATA EMAIL2.EMAIL_TRAN_SUMMARY;
SET  EMAIL2.EMAIL_TRAN_SUMMARY;
DEMAND_PRE12_PCT=DEMAND_PRE_12/(AOV*ORDERS);
RUN;

/*END OF ONLINE TRANSACTION */
/*START OF STORE TRANSACTION AGGREGATION*/
LIBNAME OMNI 'm:\Fanli\STORE DATA';

proc sql;
create table email as
SELECT EMAIL_ADDRESS, EMAIL_ID FROM SDDB.EMAIL_ADDRESS;
quit;


PROC SQL;
CREATE TABLE Saks_str_eml_dt AS
SELECT
	DISTINCT 
		B.EMAIL_ID ,
		A.ORDERDATE_FL,
		A.GRP_CD ,
		C.RESPONDER,
		C.CUTOFF_DT
FROM
	OMNI.Saks_str_eml_dt A 
	INNER JOIN  email B ON UPCASE(A.EMAIL_ADDRESS) =B.EMAIL_ADDRESS
	INNER JOIN EMAIL2.EMAIL_ID_CUTOFF C ON B. EMAIL_ID= C.EMAIL_ID;
QUIT;

DATA SAKS_STR_EML_DT ;
SET  SAKS_STR_EML_DT ;
WHERE ORDERDATE_FL < (CUTOFF_DT);
RUN;


PROC SQL;
CREATE TABLE SAKS_STR_EML_DT AS
SELECT
	DISTINCT 
		EMAIL_ID , 
		ORDERDATE_FL, 
		RESPONDER, 
		CUTOFF_DT, 
		CATEGORY , 
		C.YEAR AS ORD_YR,
		C.MONTH_NUMBER AS ORD_MTH,
		D.MONTH_NUMBER AS CUT_MTH
FROM 
	SAKS_STR_EML_DT A 
	INNER JOIN FANLI.CATEGORY_MAP B ON A.GRP_CD = B. FL_GROUP_ID
	INNER JOIN FANLI.WEEKLY_CALENDAR C ON A.ORDERDATE_FL= C. DATE
	INNER JOIN FANLI.WEEKLY_CALENDAR D ON (A.CUTOFF_DT) = D. DATE
;
QUIT;

PROC SQL;
CREATE TABLE EMAIL2.SAKS_STR_EML_DT_SUMMARY AS
SELECT
	DISTINCT 
		EMAIL_ID,
		RESPONDER,
		CUTOFF_DT,
		MIN(ORDERDATE_FL) AS FIRST_ORDER_DT_STR FORMAT DATE9.,
		MAX(ORDERDATE_FL) AS LAST_ORDER_DT_STR FORMAT DATE9.,
		COUNT(DISTINCT ORDERDATE_FL) AS TRIPS_STR,
		COUNT(DISTINCT (CASE WHEN CUT_MTH= ORD_MTH THEN ORD_YR END) ) AS PRE_MTH_TIMES_STR,
		COUNT(DISTINCT CATEGORY) AS CATEGORIES_STR
FROM
	SAKS_STR_EML_DT
GROUP BY 
	EMAIL_ID,
	RESPONDER,
	CUTOFF_DT;
QUIT;


DATA EMAIL2.SAKS_STR_EML_DT_SUMMARY ;
SET  EMAIL2.SAKS_STR_EML_DT_SUMMARY ;
TSL_PURCHASE_STR = ABS(INTCK('MONTH',LAST_ORDER_DT_STR,(CUTOFF_DT)));
TSF_PURCHASE_STR = ABS(INTCK('MONTH',FIRST_ORDER_DT_STR,(CUTOFF_DT)));
RUN;

/*END OF STORE DATA AGGREGATION*/

PROC SORT DATA=EMAIL2.SAKS_SESSION_ACTIVE_90D_SUMMARY ;BY EMAIL_ID RESPONDER CUTOFF_DT ; RUN;
PROC SORT DATA=EMAIL2.EMAIL_TRAN_SUMMARY ;BY EMAIL_ID RESPONDER CUTOFF_DT ; RUN;
PROC SORT DATA=EMAIL2.SAKS_STR_EML_DT_SUMMARY ;BY EMAIL_ID RESPONDER CUTOFF_DT ; RUN;


DATA EMAIL2.NEW_MM_MODEL_RAW;
MERGE  EMAIL2.SAKS_SESSION_ACTIVE_90D_SUMMARY(IN=A)
	   EMAIL2.EMAIL_TRAN_SUMMARY(IN=B)
	   EMAIL2.SAKS_STR_EML_DT_SUMMARY (IN=C);
BY EMAIL_ID RESPONDER CUTOFF_DT ;
IF A OR B OR C;
TSL_BROWSE=ABS(TSL_BROWSE);
RUN;


DATA EMAIL2.NEW_MM_MODEL_RAW;
SET  EMAIL2.NEW_MM_MODEL_RAW;
IF SESSION_CNTS NE . THEN DO ;
	AFF_SESSIONS_PCT = AFF_SESSIONS/SESSION_CNTS;
	EML_SESSIONS_PCT = EML_SESSIONS/SESSION_CNTS;
	SM_SESSIONS_PCT  = SM_SESSIONS/SESSION_CNTS;
	DP_SESSIONS_PCT = DP_SESSIONS/SESSION_CNTS;
	NS_SESSIONS_PCT  = NS_SESSIONS/SESSION_CNTS;
	SR_SESSIONS_PCT  = SR_SESSIONS/SESSION_CNTS;
	SC_SESSIONS_PCT  = SC_SESSIONS/SESSION_CNTS;
END;
RUN;

PROC CONTENTS DATA=EMAIL2.NEW_MM_MODEL_RAW OUT= EMAIL2.NEW_MM_MODEL_RAW_CONTENTS;RUN;

PROC SORT DATA = EMAIL2.NEW_MM_MODEL_RAW_CONTENTS; BY NAME;RUN;

PROC DELETE DATA=EMAIL2.MASTER_UNIV;RUN;

DATA EMAIL2.NEW_MM_MODEL_RAW_CONTENTS;
SET EMAIL2.NEW_MM_MODEL_RAW_CONTENTS END=EOF;              /* READ SAS DATASET */
BY NAME ;                                          /* SORT SEQ */
IF FIRST.NAME THEN DO;                    
      NUMMETRIC+1;                                     
      METRICS = 0;
END;
METRICS + 1;
IF LAST.NAME THEN DO;                       /* EOF VENDOR, MAKE MAC VARS*/
      CALL SYMPUT('MPROMO'||LEFT(PUT(NUMMETRIC,3.)),COMPRESS(NAME));
      CALL SYMPUT('MMETRICS'||LEFT(PUT(NUMMETRIC,3.)),LEFT(METRICS));
END;
IF EOF THEN
      CALL SYMPUT('MTOTCT_PROMO',COMPRESS(NUMMETRIC));                  /* MAC VAR NO DIF CTYS */
RUN;


%PUT *** MTOTCT_PROMO=&MTOTCT_PROMO;      

%MACRO LOOPTEST;                                
%DO I=1 %TO &MTOTCT_PROMO;                                  /* LOOP THRU ALL VENDORS */
                  %PUT *** FILE = &&MPROMO&I ILOOP &I OF &MTOTCT_PROMO ; 
%END; 
%MEND LOOPTEST;                                       /* END OF MACRO */
%LOOPTEST   
%PUT &MTOTCT_PROMO;


%MACRO UNIV;
%DO I=1 %TO &MTOTCT_PROMO;                                  /* LOOP THRU ALL VENDORS */
PROC UNIVARIATE DATA=  EMAIL2.NEW_MM_MODEL_RAW PLOT NOPRINT;
VAR &&MPROMO&I..;
OUTPUT OUT = &&MPROMO&I.._UNIV N=N NMISS=NMISS MIN=MIN MAX=MAX MEAN=MEAN STD=STD
PCTLPTS= 0 10  20 30 40 50 60 70 80 90 95 98 100 PCTLPRE=P_;
RUN;

DATA &&MPROMO&I.._UNIV;
SET &&MPROMO&I.._UNIV;
FORMAT VAR $30.;
VAR="&&MPROMO&I..";
RUN;

PROC APPEND BASE = EMAIL2.MASTER_UNIV DATA=&&MPROMO&I.._UNIV FORCE;
RUN;
%END;
%MEND UNIV;
%UNIV;


DATA EMAIL2.MASTER_UNIV;
SET EMAIL2.MASTER_UNIV;
DROP PROCESS_FLAG;
RUN;

DATA EMAIL2.MASTER_UNIV;
SET EMAIL2.MASTER_UNIV;
WHERE VAR NOT IN (
'AFF_SESSIONS',
'CUTOFF_DT',
'DEMAND_PRE_12',
'EMAIL_ID',
'EML_SESSIONS',
'FIRST_ORDER_DT',
'FIRST_ORDER_DT_STR',
'LAST_BROWSE_DT',
'LAST_ORDER_DT',
'LAST_ORDER_DT_STR',
'NS_SESSIONS',
'DP_SESSIONS',
'SM_SESSIONS',
'RESPONDER',
'SC_SESSIONS',
'SR_SESSIONS');
FORMAT PROCESS_FLAG $5.;
IF  P_100 <=12 THEN PROCESS_FLAG ='ACT';
ELSE IF P_100>12 AND P_50>5 THEN PROCESS_FLAG ='PCT';
ELSE IF P_100>12 AND P_50<=5 THEN PROCESS_FLAG='PCT2';;
RUN;




PROC SQL; SELECT COUNT(DISTINCT VAR) INTO : MTOTCT_PROMO_PCT FROM EMAIL2.MASTER_UNIV WHERE PROCESS_FLAG='PCT';QUIT;
%PUT &MTOTCT_PROMO_PCT.;
PROC SQL;SELECT DISTINCT VAR INTO : MPROMO_PCT1-:MPROMO_PCT11 FROM EMAIL2.MASTER_UNIV WHERE PROCESS_FLAG='PCT';QUIT;
%PUT &MPROMO_PCT1;

%MACRO NORMALIZE;
%DO I=1 %TO &MTOTCT_PROMO_PCT;                                  /* LOOP THRU ALL VENDORS */
PROC SQL;
CREATE TABLE  EMAIL2.NEW_MM_MODEL_RAW AS 
SELECT
	DISTINCT 
		A.*, 
		(CASE WHEN &&MPROMO_PCT&I.. =0 THEN 0
			 WHEN &&MPROMO_PCT&I..  NE 0 
				  AND &&MPROMO_PCT&I.. >=(SELECT DISTINCT P_0 FROM EMAIL2.MASTER_UNIV WHERE VAR = "&&MPROMO_PCT&I.." ) 
				  AND &&MPROMO_PCT&I.. < (SELECT DISTINCT P_10 FROM EMAIL2.MASTER_UNIV WHERE VAR = "&&MPROMO_PCT&I.." )  THEN  1
			 WHEN &&MPROMO_PCT&I.. >=(SELECT DISTINCT P_10 FROM EMAIL2.MASTER_UNIV WHERE VAR = "&&MPROMO_PCT&I.." ) 
				  AND &&MPROMO_PCT&I.. < (SELECT DISTINCT P_20 FROM EMAIL2.MASTER_UNIV WHERE VAR = "&&MPROMO_PCT&I.." )  THEN  2
			 WHEN &&MPROMO_PCT&I.. >=(SELECT DISTINCT P_20 FROM EMAIL2.MASTER_UNIV WHERE VAR = "&&MPROMO_PCT&I.." ) 
				  AND &&MPROMO_PCT&I.. < (SELECT DISTINCT P_30 FROM EMAIL2.MASTER_UNIV WHERE VAR = "&&MPROMO_PCT&I.." )  THEN  3
			 WHEN &&MPROMO_PCT&I.. >=(SELECT DISTINCT P_30 FROM EMAIL2.MASTER_UNIV WHERE VAR= "&&MPROMO_PCT&I.." ) 
				  AND &&MPROMO_PCT&I.. < (SELECT DISTINCT P_40 FROM EMAIL2.MASTER_UNIV WHERE VAR= "&&MPROMO_PCT&I.." )  THEN  4
			 WHEN &&MPROMO_PCT&I.. >=(SELECT DISTINCT P_40 FROM EMAIL2.MASTER_UNIV WHERE VAR= "&&MPROMO_PCT&I.." ) 
				  AND &&MPROMO_PCT&I.. < (SELECT DISTINCT P_50 FROM EMAIL2.MASTER_UNIV WHERE VAR= "&&MPROMO_PCT&I.." )  THEN  5
			 WHEN &&MPROMO_PCT&I.. >=(SELECT DISTINCT P_50 FROM EMAIL2.MASTER_UNIV WHERE VAR= "&&MPROMO_PCT&I.." ) 
				  AND &&MPROMO_PCT&I.. < (SELECT DISTINCT P_60 FROM EMAIL2.MASTER_UNIV WHERE VAR= "&&MPROMO_PCT&I.." )  THEN  6
			 WHEN &&MPROMO_PCT&I.. >=(SELECT DISTINCT P_60 FROM EMAIL2.MASTER_UNIV WHERE VAR= "&&MPROMO_PCT&I.." ) 
				  AND &&MPROMO_PCT&I.. < (SELECT DISTINCT P_70 FROM EMAIL2.MASTER_UNIV WHERE VAR = "&&MPROMO_PCT&I.." )  THEN  7
			 WHEN &&MPROMO_PCT&I.. >=(SELECT DISTINCT P_70 FROM EMAIL2.MASTER_UNIV WHERE VAR= "&&MPROMO_PCT&I.." ) 
				  AND &&MPROMO_PCT&I.. < (SELECT DISTINCT P_80 FROM EMAIL2.MASTER_UNIV WHERE VAR= "&&MPROMO_PCT&I.." )  THEN  8
			 WHEN &&MPROMO_PCT&I.. >=(SELECT DISTINCT P_80 FROM EMAIL2.MASTER_UNIV WHERE VAR= "&&MPROMO_PCT&I.." ) 
				  AND &&MPROMO_PCT&I.. < (SELECT DISTINCT P_90 FROM EMAIL2.MASTER_UNIV WHERE VAR= "&&MPROMO_PCT&I.." )  THEN  9
			 WHEN &&MPROMO_PCT&I.. >=(SELECT DISTINCT P_90 FROM EMAIL2.MASTER_UNIV WHERE VAR= "&&MPROMO_PCT&I.." ) 
				  AND  &&MPROMO_PCT&I.. < (SELECT DISTINCT P_95 FROM EMAIL2.MASTER_UNIV WHERE VAR= "&&MPROMO_PCT&I.." )  THEN  10
			 WHEN &&MPROMO_PCT&I.. >=(SELECT DISTINCT P_95 FROM EMAIL2.MASTER_UNIV WHERE VAR= "&&MPROMO_PCT&I.." ) 
				  AND &&MPROMO_PCT&I.. <=(SELECT DISTINCT P_100 FROM EMAIL2.MASTER_UNIV WHERE VAR= "&&MPROMO_PCT&I.." )  THEN  11
		END )AS &&MPROMO_PCT&I.._REV
FROM
	EMAIL2.NEW_MM_MODEL_RAW A;
QUIT;
%END;
%MEND NORMALIZE;
%NORMALIZE;

PROC SQL; SELECT COUNT(DISTINCT VAR) INTO : MTOTCT_PROMO_PCT2 FROM EMAIL2.MASTER_UNIV WHERE PROCESS_FLAG='PCT2';QUIT;
%PUT &MTOTCT_PROMO_PCT2.;

PROC SQL;SELECT DISTINCT VAR INTO : MPROMO_PCT2_1-:MPROMO_PCT2_19 FROM EMAIL2.MASTER_UNIV WHERE PROCESS_FLAG='PCT2';QUIT;
%PUT &MPROMO_PCT2_1;
%PUT &MPROMO_PCT2_11;


*;

%MACRO NORMALIZE;
%DO I=1 %TO &MTOTCT_PROMO_PCT2;                                  /* LOOP THRU ALL VENDORS */
PROC SQL;
CREATE TABLE  EMAIL2.NEW_MM_MODEL_RAW AS 
SELECT
	DISTINCT 
		A.*, 
		(CASE 
			  WHEN &&MPROMO_PCT2_&I.. =0 THEN 0
			  /*<=P_50*/
			  WHEN &&MPROMO_PCT2_&I.. <=(SELECT DISTINCT P_50 FROM EMAIL2.MASTER_UNIV WHERE VAR = "&&MPROMO_PCT2_&I.." ) THEN   &&MPROMO_PCT2_&I..
			  /*>P_50*/
			  WHEN  &&MPROMO_PCT2_&I.. NE 0 
				   AND  &&MPROMO_PCT2_&I.. >(SELECT DISTINCT P_50 FROM EMAIL2.MASTER_UNIV WHERE VAR = "&&MPROMO_PCT2_&I.." ) 
				   AND &&MPROMO_PCT2_&I.. <=(SELECT DISTINCT P_60 FROM EMAIL2.MASTER_UNIV WHERE VAR = "&&MPROMO_PCT2_&I.." )  
				   THEN  (SELECT DISTINCT P_60 FROM EMAIL2.MASTER_UNIV WHERE VAR = "&&MPROMO_PCT2_&I..")+1
			  WHEN  &&MPROMO_PCT2_&I.. NE 0 
				   AND  &&MPROMO_PCT2_&I.. >(SELECT DISTINCT P_60 FROM EMAIL2.MASTER_UNIV WHERE VAR = "&&MPROMO_PCT2_&I.." ) 
				   AND &&MPROMO_PCT2_&I.. <=(SELECT DISTINCT P_70 FROM EMAIL2.MASTER_UNIV WHERE VAR = "&&MPROMO_PCT2_&I.." )  
				   THEN  (SELECT DISTINCT P_60 FROM EMAIL2.MASTER_UNIV WHERE VAR = "&&MPROMO_PCT2_&I..")+2
			  WHEN  &&MPROMO_PCT2_&I.. NE 0 
				   AND  &&MPROMO_PCT2_&I.. >(SELECT DISTINCT P_70 FROM EMAIL2.MASTER_UNIV WHERE VAR = "&&MPROMO_PCT2_&I.." ) 
				   AND &&MPROMO_PCT2_&I.. <=(SELECT DISTINCT P_80 FROM EMAIL2.MASTER_UNIV WHERE VAR = "&&MPROMO_PCT2_&I.." )  
				   THEN  (SELECT DISTINCT P_60 FROM EMAIL2.MASTER_UNIV WHERE VAR = "&&MPROMO_PCT2_&I..")+3
			  WHEN  &&MPROMO_PCT2_&I.. NE 0 
				   AND  &&MPROMO_PCT2_&I.. >(SELECT DISTINCT P_80 FROM EMAIL2.MASTER_UNIV WHERE VAR = "&&MPROMO_PCT2_&I.." ) 
				   AND &&MPROMO_PCT2_&I.. <=(SELECT DISTINCT P_90 FROM EMAIL2.MASTER_UNIV WHERE VAR = "&&MPROMO_PCT2_&I.." )  
				   THEN  (SELECT DISTINCT P_60 FROM EMAIL2.MASTER_UNIV WHERE VAR = "&&MPROMO_PCT2_&I..")+4
			  WHEN  &&MPROMO_PCT2_&I.. NE 0 
				   AND  &&MPROMO_PCT2_&I.. >(SELECT DISTINCT P_90 FROM EMAIL2.MASTER_UNIV WHERE VAR = "&&MPROMO_PCT2_&I.." ) 
				   AND &&MPROMO_PCT2_&I.. <=(SELECT DISTINCT P_95 FROM EMAIL2.MASTER_UNIV WHERE VAR = "&&MPROMO_PCT2_&I.." )  
				   THEN  (SELECT DISTINCT P_60 FROM EMAIL2.MASTER_UNIV WHERE VAR = "&&MPROMO_PCT2_&I..")+5
			  WHEN  &&MPROMO_PCT2_&I.. NE 0 
				   AND  &&MPROMO_PCT2_&I.. >(SELECT DISTINCT P_95 FROM EMAIL2.MASTER_UNIV WHERE VAR = "&&MPROMO_PCT2_&I.." ) 
				   AND &&MPROMO_PCT2_&I.. <=(SELECT DISTINCT P_98 FROM EMAIL2.MASTER_UNIV WHERE VAR = "&&MPROMO_PCT2_&I.." )  
				   THEN  (SELECT DISTINCT P_60 FROM EMAIL2.MASTER_UNIV WHERE VAR = "&&MPROMO_PCT2_&I..")=6
			  WHEN  &&MPROMO_PCT2_&I.. NE 0 
				   AND  &&MPROMO_PCT2_&I.. >(SELECT DISTINCT P_98 FROM EMAIL2.MASTER_UNIV WHERE VAR = "&&MPROMO_PCT2_&I.." ) 
				   AND &&MPROMO_PCT2_&I.. <=(SELECT DISTINCT P_100 FROM EMAIL2.MASTER_UNIV WHERE VAR = "&&MPROMO_PCT2_&I.." )  
				   THEN  (SELECT DISTINCT P_60 FROM EMAIL2.MASTER_UNIV WHERE VAR = "&&MPROMO_PCT2_&I..")+7 
			END) AS &&MPROMO_PCT2_&I.._REV
FROM
	EMAIL2.NEW_MM_MODEL_RAW A;
QUIT;
%END;
%MEND NORMALIZE;
%NORMALIZE;

/*REPLACE MISSING VALUES*/
DATA EMAIL2.NEW_MM_MODEL_RAW ;
SET  EMAIL2.NEW_MM_MODEL_RAW ;
IF AFF_SESSIONS_PCT =. THEN AFF_SESSIONS_PCT =0;
IF EML_SESSIONS_PCT =. THEN EML_SESSIONS_PCT =0;
IF NS_SESSIONS_PCT =. THEN NS_SESSIONS_PCT =0;
IF DP_SESSIONS_PCT =. THEN DP_SESSIONS_PCT =0;
IF SM_SESSIONS_PCT =. THEN SM_SESSIONS_PCT =0;
IF SC_SESSIONS_PCT =. THEN SC_SESSIONS_PCT =0;
IF SR_SESSIONS_PCT =. THEN SR_SESSIONS_PCT =0;
IF SESSION_CNTS_REV =. THEN SESSION_CNTS_REV =0;
IF DEVICE_TYPE_CNTS_REV =. THEN DEVICE_TYPE_CNTS_REV =0;
IF SEC_ON_PAGE_REV =. THEN SEC_ON_PAGE_REV =0;
IF PAGE_VIEWS_REV =. THEN PAGE_VIEWS_REV =0;
IF PAGE_TYPE_VIEWED_REV =. THEN PAGE_TYPE_VIEWED_REV =0;
IF PRODUCT_VIEWED_REV =. THEN PRODUCT_VIEWED_REV =0;
IF CATEGORY_VIEWED_REV =. THEN CATEGORY_VIEWED_REV =0;

IF REFINE_EVENT_REV =. THEN REFINE_EVENT_REV =0;
IF COLOR_EVENT_REV =. THEN COLOR_EVENT_REV =0;
IF SIZE_EVENT_REV =. THEN SIZE_EVENT_REV =0;
IF ADDTOBAG_EVENT_REV =. THEN ADDTOBAG_EVENT_REV =0;
IF WAITLIST_EVENT_REV =. THEN WAITLIST_EVENT_REV =0;
IF ALTERIMG_EVENT_REV =. THEN ALTERIMG_EVENT_REV =0;
IF ADDTOFAV_EVENT_REV =. THEN ADDTOFAV_EVENT_REV =0;
IF VIDEO_EVENT_REV =. THEN VIDEO_EVENT_REV =0;

IF AOV_REV =. THEN AOV_REV =0;
IF ORDERS_REV =. THEN ORDERS_REV =0;
IF ORDERS_PRE_12_REV =. THEN ORDERS_PRE_12_REV =0;
IF PRD_DEL_REV =. THEN PRD_DEL_REV =0;
IF PRD_QL_REV =. THEN PRD_QL_REV =0;
IF PRODS_REV =. THEN PRODS_REV =0;
IF TRIPS_STR_REV =. THEN TRIPS_STR_REV =0;
IF TSF_PURCHASE_REV =. THEN TSF_PURCHASE_REV =9999;
IF TSF_PURCHASE_STR_REV =. THEN TSF_PURCHASE_STR_REV =9999;
IF TSL_BROWSE_REV =. THEN TSL_BROWSE_REV =9999;
IF TSL_PURCHASE_REV =. THEN TSL_PURCHASE_REV =9999;
IF TSL_PURCHASE_STR_REV =. THEN TSL_PURCHASE_STR_REV =9999;
IF CATEGORIES =. THEN CATEGORIES =0;
IF CATEGORIES_PRE12 =. THEN CATEGORIES_PRE12 =0;
IF CATEGORIES_STR =. THEN CATEGORIES_STR =0;
IF DEMAND_PRE12_PCT =. THEN DEMAND_PRE12_PCT =0;
IF GM_RATE =. THEN GM_RATE =0;
IF GM_RATE_PRE_12 =. THEN GM_RATE_PRE_12 =0;
IF RTN_RATE =. THEN RTN_RATE =0;
;RUN;

DATA EMAIL2.NEW_MM_MODEL_RAW  ;
SET EMAIL2.NEW_MM_MODEL_RAW  ;
IF LAST_ORDER_DT =. AND LAST_ORDER_DT_STR =. THEN BUYER_STATUS = 0;
IF LAST_ORDER_DT NE . AND LAST_ORDER_DT_STR NE . THEN BUYER_STATUS = 3;
IF LAST_ORDER_DT NE . AND LAST_ORDER_DT_STR =. THEN BUYER_STATUS = 2;
IF LAST_ORDER_DT =. AND LAST_ORDER_DT_STR  NE . THEN BUYER_STATUS = 1;
RUN;

PROC SORT DATA  = EMAIL2.NEW_MM_MODEL_RAW ; 
BY RESPONDER BUYER_STATUS ;
RUN;

PROC SQL;
SELECT DISTINCT RESPONDER,BUYER_STATUS, COUNT(DISTINCT EMAIL_ID) AS EMAIL
FROM EMAIL2.NEW_MM_MODEL_RAW
GROUP BY 1,2;
QUIT;

/*RESPONDER EMAIL */
/*0 548486 */
/*1 977855 */



PROC SQL;
SELECT DISTINCT RESPONDER, COUNT(DISTINCT EMAIL_ADDRESS) AS EMAIL_ADDRESS
FROM EMAIL2.EMAIL_CUTOFF
GROUP BY 1;
QUIT;
/*RESPONDER EMAIL_ADDRESS */
/*0 736257 */
/*1 1194341 */


PROC CONTENTS DATA=EMAIL2.NEW_MM_MODEL_RAW OUT= EMAIL2.NEW_MM_MODEL_RAW_CONTENTS2;RUN;


proc surveyselect 
data =  EMAIL2.NEW_MM_MODEL_RAW  
out = EMAIL2.NEW_MM_MODEL_RAW_TEST method = srs samprate = 0.5 seed = 9876;
strata RESPONDER BUYER_STATUS ;
run;

PROC SQL;
CREATE TABLE EMAIL2.NEW_MM_MODEL_RAW_CTRL AS
SELECT *
FROM EMAIL2.NEW_MM_MODEL_RAW
WHERE EMAIL_ID NOT IN (SELECT EMAIL_ID FROM EMAIL2.NEW_MM_MODEL_RAW_TEST);QUIT;
/**/
/**/


ods graphics off;
proc logistic data=EMAIL2.NEW_MM_MODEL_RAW_TEST  covout 
outMODEL=EMAIL2.NEW_MM_MODEL_OUTPUT descending;
class       
BUYER_STATUS
cross_device_indicator
/*TRIPS_STR_REV*/
/*TSF_PURCHASE_REV*/
/*TSF_PURCHASE_STR_REV*/
/*TSL_BROWSE_REV*/
/*TSL_PURCHASE_REV*/
/*TSL_PURCHASE_STR_REV*/
ORDERS_REV
ORDERS_PRE_12_REV
/ param=ref;  /*for categorical variables, to check design variables*/

model RESPONDER = 
 AFF_SESSIONS_PCT 
 EML_SESSIONS_PCT
 NS_SESSIONS_PCT
 DP_SESSIONS_PCT 
 SM_SESSIONS_PCT
 SC_SESSIONS_PCT 
 SR_SESSIONS_PCT 
 SESSION_CNTS_REV
 DEVICE_TYPE_CNTS_REV 
 SEC_ON_PAGE_REV 
 PAGE_VIEWS_REV 
 PAGE_TYPE_VIEWED_REV 
 PRODUCT_VIEWED_REV 
 CATEGORY_VIEWED_REV 
 REFINE_EVENT_REV 
 COLOR_EVENT_REV 
 SIZE_EVENT_REV 
 ADDTOBAG_EVENT_REV 
 WAITLIST_EVENT_REV 
 ALTERIMG_EVENT_REV 
 ADDTOFAV_EVENT_REV 
 VIDEO_EVENT_REV 
AOV_REV
ORDERS_REV
ORDERS_PRE_12_REV
PRD_DEL_REV
PRD_QL_REV
PRODS_REV
SESSION_CNTS_REV
TRIPS_STR_REV
TSF_PURCHASE_REV
TSF_PURCHASE_STR_REV
TSL_BROWSE_REV
TSL_PURCHASE_REV
TSL_PURCHASE_STR_REV
CATEGORIES
CATEGORIES_PRE12
CATEGORIES_STR
DEMAND_PRE12_PCT
GM_RATE
GM_RATE_PRE_12
RTN_RATE
BUYER_STATUS
cross_device_indicator


/sls = 0.05 sle = 0.05 details lackfit ctable pprob = (.05 to .6 by .05) outroc=EMAIL2.roc1
selection = STEPWISE 
/*RIDGING= absolute*/
;
ods output ParameterEstimates = EMAIL2.pest_test1;
ods graphics off;
output out = EMAIL2.model_test p = predval xbeta = logit;
;
run;
quit;
 
data EMAIL2.model_test;
set EMAIL2.model_test;
drop Pred_S1;
run;

/*Setting the cut-off probability - Test dataset*/
data EMAIL2.model_test;
set EMAIL2.model_test;
if predval >= 0.50 then Pred_S1 = 1;
else IF predval < 0.50  and predval ne . then Pred_S1 = 0;
run;

proc sort data= EMAIL2.model_test;by predval;run;

/*Classification Matrix - Test dataset*/
proc freq data = EMAIL2.model_test;
tables RESPONDER * Pred_S1 /out = EMAIL2.TEST_CTAB;
run;


/*Scoring the validation dataset*/
/*proc logistic inmodel = SALE.INMODEL_APR2013 descending;*/
proc logistic inmodel = EMAIL2.NEW_MM_MODEL_OUTPUT  descending;
	score data =  EMAIL2.NEW_MM_MODEL_RAW_CTRL out= EMAIL2.NEW_MM_MODEL_RAW_CTRL_v;
run;



/*Setting the cut-off probability - Validation dataset*/
data EMAIL2.NEW_MM_MODEL_RAW_CTRL_v;
set EMAIL2.NEW_MM_MODEL_RAW_CTRL_v;
if P_1 >= 0.5 then Pred_S1 = 1;else Pred_S1 = 0;
run;

/*Classification Matrix - Validation dataset*/
proc freq data = EMAIL2.NEW_MM_MODEL_RAW_CTRL_v;
tables RESPONDER * Pred_S1 /out = any.CTRL_CTAB;
run;


