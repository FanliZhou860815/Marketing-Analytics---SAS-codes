libname br 'M:\Candice\Aster\Browse_Segmentation\NonBuyer';
LIBNAME FINAL 'F:\Candice\Saks_CRM_Feeds';
libname SDDB oracle user=czhang2 pass=******** path=neworacle  schema=SDMRK;
libname FANLI 'M:\Fanli';
LIBNAME ast ASTER DSN=Aster SCHEMA=dw;
libname orders 'F:\orders';
LIBNAME rep ASTER DSN=Aster SCHEMA=replicator;



/*** BUYER FORD ***/
DATA PRODUCT;
SET sddb.product ( dbsastype= ( PRD_ID='char(16)') );
KEEP GROUP_ID PRODUCT_CODE PRD_ID ;
RUN;

PROC SQL;
CREATE TABLE PRODUCT AS
SELECT DISTINCT A.*
FROM PRODUCT a;
QUIT;


/*Get first online orderdate from SDMRK orders*/
PROC SQL;
CREATE TABLE ORDERS AS
SELECT DISTINCT INDIVIDUAL_ID, DATEPART(ORDERDATE) AS ORDERDATE FORMAT DATE9., GROUP_ID
FROM SDDB.ORDERS
WHERE
	INDIVIDUAL_ID NOT IN (0,999999999,.)
	AND DIVISION_ID NOT IN ('4','5','9')
	AND ORDER_LINE_STATUS IN ('X','R','D')
	AND EMPLOYEE_INDICATOR NE 1
union
SELECT DISTINCT INDIVIDUAL_ID, DATEPART(ORDERDATE) AS ORDERDATE FORMAT DATE9., GROUP_ID
FROM orders.V_ORDERS_HIST_NEW
WHERE
	INDIVIDUAL_ID NOT IN (0,999999999,.)
	AND DIVISION_ID NOT IN ('4','5','9')
	AND ORDER_LINE_STATUS IN ('X','R','D')
	AND EMPLOYEE_INDICATOR NE 1;
QUIT;

/*first order date based on all history -- not on category first order date*/
/*but will have the category that customer purchased in his/her first order*/
/*they are the categories made him/her convert*/
PROC SQL;
CREATE TABLE FORD_ONLINE AS
SELECT
	DISTINCT INDIVIDUAL_ID,MIN(ORDERDATE) AS FORD_DT FORMAT DATE9. , GROUP_ID 
FROM
	ORDERS
GROUP BY 1
HAVING ORDERDATE =MIN(ORDERDATE);
QUIT;

PROC SQL;
CREATE TABLE FORD_ONLINE AS
SELECT
	DISTINCT A.INDIVIDUAL_ID, FORD_DT,  B.CATEGORY_NUM_2 AS CATEGORY 
FROM 
	FORD_ONLINE A INNER JOIN FANLI.CATEGORY_MAP B ON A.GROUP_ID=B.GROUP_ID;
QUIT;


DATA FORD_ONLINE;
SET FORD_ONLINE;
CONVERT_FLAG='Y';
RUN;

PROC TRANSPOSE DATA=FORD_ONLINE OUT= FORD_ONLINE_T PREFIX=CAT_;
BY INDIVIDUAL_ID FORD_DT;
ID CATEGORY ;
VAR CONVERT_FLAG;
RUN;

DATA FORD_ONLINE_T ;
SET FORD_ONLINE_T ;
DROP _NAME_;
RUN;

PROC SQL;
CREATE TABLE FORD_ONLINE_EML AS
SELECT 
	DISTINCT A.* , B.EMAIL_ADDRESS
FROM
	FORD_ONLINE_T A INNER JOIN SDDB.CUSTOMER B ON A.INDIVIDUAL_ID=B.INDIVIDUAL_ID
WHERE
	B.INDIVIDUAL_ID NOT IN (0,999999999,.)
GROUP BY 
	EMAIL_ADDRESS
ORDER BY 
	EMAIL_ADDRESS, FORD_DT;
QUIT;

DATA FORD_ONLINE_EML;
SET FORD_ONLINE_EML;
BY EMAIL_ADDRESS;
IF FIRST. EMAIL_ADDRESS =1 ;
RUN;

DATA BR.FORD_ONLINE_EML;
SET FORD_ONLINE_EML;
DROP INDIVIDUAL_ID;
RUN;

PROC SQL; SELECT COUNT(*) AS OBS, COUNT(DISTINCT EMAIL_ADDRESS) FROM BR.FORD_ONLINE_EML; QUIT;



/**************************************************************************************/
/************* BUYER BROWSE: 14 day browsing history prior to first order *************/
/**************************************************************************************/

/**************** 1. SEC_ON_PAGE & PAGE_VIEWS (W/ PRODUCT_CODE) **************/

/********** 1.1 EVENTS RELATED WITH PRODUCT PAGE VIEWS(PDP) - PRODUCT_CODE NOT NULL *********/
/** EVENTS INCLUDE: ADD_FAV, ADD_TB, ALT_IMG, COLOUR, SIZE, VIDEO **/

/*optimize: upgrade to group_id level --> refer to replicator.hbc_dw_mrep_bi_product to get group_id*/
proc sql; 
connect to ASTER as ast (DSN=Aster);
create table FORD_BROWSE as
SELECT * FROM connection to ast (
SELECT 
		UPPER(A.EMAIL) AS EMAIL_ADDRESS,
		A.GROUP_ID,
		SUM(A.SEC_ON_PAGE) AS SEC_ON_PAGE,
		SUM(A.PAGE_VIEWS) AS PAGE_VIEWS
FROM
	(SELECT 
		UUID.EMAIL,
		PRD.GROUP_ID,
		VIEWS.DATE_FILTER,
		SUM(sec_on_page) AS SEC_ON_PAGE,
		COUNT(page_view_uuid) AS PAGE_VIEWS
	FROM 
		dw.fact_omni_saks_page_views  VIEWS
	INNER JOIN 
	(select distinct product_code, GROUP_ID from replicator.hbc_dw_mrep_bi_product) AS PRD  
	ON VIEWS.PRODUCT_CODE=PRD.product_code
	INNER JOIN 
		(SELECT DISTINCT 
				VISITOR_DEVICE_UUID, 
				VISITOR_UUID, 
				EMAIL 	
		FROM dw.dim_visitor_devices
		WHERE TRIM(EMAIL) <> "" AND SOURCE = 'saks'
		) UUID 
	ON VIEWS.VISITOR_DEVICE_UUID = UUID. VISITOR_DEVICE_UUID 
	INNER JOIN 
		(SELECT DISTINCT 			
				UUID2.EMAIL,
				MIN(DATE_FILTER) AS FORD
		FROM dw.fact_omni_saks_events  events
		INNER JOIN
			(SELECT DISTINCT VISITOR_DEVICE_UUID, VISITOR_UUID, EMAIL FROM dw.dim_visitor_devices
			WHERE TRIM(EMAIL) <> "" AND SOURCE = 'saks') UUID2 
		ON events.VISITOR_DEVICE_UUID = UUID2. VISITOR_DEVICE_UUID 
		WHERE EVENTS.EVENT_TYPE_ID = 9 /*purchase*/
		GROUP BY UUID2.EMAIL 
	) FORD
	ON UUID.EMAIL=FORD.EMAIL AND VIEWS.DATE_FILTER<=FORD.FORD AND VIEWS.DATE_FILTER>=(FORD.FORD - interval '336 hours')
WHERE 
		LOWER(VIEWS.page_type) IN ('product detail','quick look','quicklook','productdetail')
		AND TRIM(VIEWS.PRODUCT_CODE) <> ""
GROUP BY 
		UUID.EMAIL,
		PRD.GROUP_ID,
		VIEWS.DATE_FILTER
) A
GROUP BY EMAIL, GROUP_ID
);
Disconnect from ast;
Quit;
/*6 mins*/

/** SUPPRESS BUYER SHOPPING BEFORE 2017 as Aster doesn't have data before 2017**/
DATA FORD_BEFORE_2017;
SET BR.FORD_ONLINE_EML;
IF YEAR(FORD_DT) < 2017;
KEEP EMAIL_ADDRESS;
RUN;

PROC SORT DATA=FORD_BROWSE; BY EMAIL_ADDRESS; RUN;
PROC SORT DATA=FORD_BEFORE_2017; BY EMAIL_ADDRESS; RUN;
DATA FORD_BROWSE;
MERGE FORD_BROWSE(IN=A) FORD_BEFORE_2017(IN=B);
BY EMAIL_ADDRESS;
IF A AND NOT B;
RUN;

/* ADD CATEGORY NUMBER*/
PROC SORT DATA=FANLI.CATEGORY_MAP; BY GROUP_ID; RUN;
PROC SORT DATA=FORD_BROWSE; BY GROUP_ID; RUN;
DATA BR.FORD_BROWSE;
MERGE FORD_BROWSE(IN=A) FANLI.CATEGORY_MAP(IN=B KEEP=GROUP_ID CATEGORY_NUM_2);
BY GROUP_ID;
IF A AND B;
DROP GROUP_ID;
RUN;


/********************* 1.2. ADDITONAL EVENTS WHEN PRODUCT_CODE EMPTY ********************/
/**EVENTS ARE TOP NAVIGATE, LEFT NAVIGATE AND REFINEMENT -- these are on category level**/
/*Top Nav Click: 8*/
/*Left Nav Click: 10*/
/*Refinement: 1*/

proc sql; 
connect to ASTER as ast (DSN=Aster);
create table FORD_BROWSE_WO_PRD as
SELECT * FROM connection to ast (
SELECT 
		UPPER(A.EMAIL) AS EMAIL_ADDRESS,
		A.VALUE2 AS CATEGORY_NUM_2,
		SUM(A.SEC_ON_PAGE) AS SEC_ON_PAGE,
		SUM(A.PAGE_VIEWS) AS PAGE_VIEWS
FROM
	(SELECT 
		UUID.EMAIL,
		VALUE2,
		VIEWS.DATE_FILTER,
		SUM(sec_on_page) AS SEC_ON_PAGE,
		COUNT(VIEWS.page_view_uuid) AS PAGE_VIEWS
	FROM 
		dw.fact_omni_saks_page_views  VIEWS
	INNER JOIN 
	(select  
				VISITOR_DEVICE_UUID,
				session_uuid,
				PAGE_VIEW_UUID,
				(CASE 
		WHEN VALUE2 LIKE '%beauty%' OR VALUE2 LIKE '%de peau beaut%' OR VALUE2 LIKE '%la mer%' 
			OR VALUE2 LIKE '%laura mercier%' OR VALUE2 LIKE '%la prairie%' OR VALUE2 LIKE '%sk-ii%' 
			OR VALUE2 LIKE '%nars%' OR VALUE2 LIKE '%shiseido%' OR VALUE2 LIKE '%chantecaille%' 
			OR VALUE2 LIKE '%diptyque%' OR VALUE2 LIKE '%guerlain%' OR VALUE2 LIKE '%est&#233;e lauder%' 
			OR VALUE2 LIKE '%aesop%' OR VALUE2 LIKE '%foreo%' OR VALUE2 LIKE '%jo malone%' 
			OR VALUE2 LIKE '%clarins%' OR VALUE2 LIKE '%clinique%' OR VALUE2 LIKE '%lipstick%' 
			OR VALUE2 LIKE '%eyebrows%' OR VALUE2 LIKE '%foundation%' OR VALUE2 LIKE '%bb cream%' THEN 1
		WHEN VALUE2 LIKE '%womensapparel%' OR VALUE2 LIKE '%sweaters%' OR VALUE2 LIKE '%contemporary%'  
			OR VALUE2 LIKE "%women's apparel%" THEN 2
		WHEN VALUE2 LIKE '%designer%' THEN 3
		WHEN VALUE2 LIKE '%homehitech%' OR VALUE2 LIKE '%candles%' THEN 4
		WHEN VALUE2 LIKE '%justkids%' then 5
		WHEN VALUE2 LIKE '%themensstore%' OR VALUE2 LIKE "%men's%" THEN 6
		WHEN VALUE2 LIKE '%shoes%' OR VALUE2 LIKE '%sandals%' OR VALUE2 LIKE '%sneakers%' 
			OR VALUE2 LIKE '%boots%' OR VALUE2 LIKE '%nicholas kirkwood%' OR VALUE2 LIKE '%manolo blahnik%' 
			THEN 81
		WHEN VALUE2 LIKE '%handbag%' OR VALUE2 LIKE '%crossbody bag%' OR VALUE2 LIKE '%shoulder bag%' then 82
		WHEN VALUE2 LIKE '%jewelryaccessories%' OR VALUE2 LIKE '%accessories%' OR VALUE2 LIKE '%belts%' OR VALUE2 LIKE '%bracelets%' 
			OR VALUE2 LIKE '%scarves%' OR VALUE2 LIKE '%sunglasses%' OR VALUE2 LIKE '%card cases%' 
			OR VALUE2 LIKE '%wallets%' OR VALUE2 LIKE '%earrings%' OR VALUE2 LIKE '%rings%' THEN 10 
	END) AS VALUE2, 
				EVENT_TYPE_ID,
				DATE_FILTER
		 	from dw.fact_omni_saks_events  EVENT
			where PRODUCT_CODE IS NULL AND EVENT_TYPE_ID IN (1, 8, 10)
	) EVENTS  
	ON VIEWS.VISITOR_DEVICE_UUID=EVENTS.VISITOR_DEVICE_UUID AND VIEWS.session_uuid=EVENTS.session_uuid
		AND VIEWS.PAGE_VIEW_UUID=EVENTS.PAGE_VIEW_UUID AND VIEWS.DATE_FILTER=EVENTS.DATE_FILTER
	INNER JOIN 
	(SELECT DISTINCT 
				VISITOR_DEVICE_UUID, 
				VISITOR_UUID, 
				EMAIL 	
		FROM dw.dim_visitor_devices
		WHERE TRIM(EMAIL) <> "" AND SOURCE = 'saks'
	) UUID 
	ON VIEWS.VISITOR_DEVICE_UUID = UUID. VISITOR_DEVICE_UUID 
	INNER JOIN 
	(SELECT DISTINCT 			
				UUID2.EMAIL,
				MIN(DATE_FILTER) AS FORD
		FROM dw.fact_omni_saks_events  EVENT2
		INNER JOIN
			(SELECT DISTINCT VISITOR_DEVICE_UUID, VISITOR_UUID, EMAIL FROM dw.dim_visitor_devices
			WHERE TRIM(EMAIL) <> "" AND SOURCE = 'saks') UUID2 
		ON EVENT2.VISITOR_DEVICE_UUID = UUID2. VISITOR_DEVICE_UUID 
		WHERE EVENT2.EVENT_TYPE_ID = 9 /*purchase*/
		GROUP BY UUID2.EMAIL 
	) FORD
	ON UUID.EMAIL=FORD.EMAIL AND VIEWS.DATE_FILTER<=FORD.FORD AND VIEWS.DATE_FILTER>=(FORD.FORD - interval '336 hours')
WHERE VIEWS.PRODUCT_CODE IS NULL
GROUP BY 
		UUID.EMAIL,
		EVENTS.VALUE2,
		VIEWS.DATE_FILTER
) A
GROUP BY A.EMAIL, A.VALUE2
);
Disconnect from ast;
Quit;
/*15mins*/

PROC SORT DATA=FORD_BROWSE_WO_PRD; BY EMAIL_ADDRESS; RUN;
PROC SORT DATA=FORD_BEFORE_2017; BY EMAIL_ADDRESS; RUN;
DATA FORD_BROWSE_WO_PRD;
MERGE FORD_BROWSE_WO_PRD(IN=A) FORD_BEFORE_2017(IN=B);
BY EMAIL_ADDRESS;
IF A AND NOT B;
RUN;
/*37% records stay*/

PROC SQL; 
CREATE TABLE BR.FORD_BROWSE_WO_PRD AS
SELECT DISTINCT 
		EMAIL_ADDRESS,
		SEC_ON_PAGE,
		PAGE_VIEWS,
		VALUE2 AS CATEGORY_NUM_2 LABEL 'CATEGORY_NUM_2'
FROM FORD_BROWSE_WO_PRD;
QUIT;


/******** WRAP UP ********/
DATA BR.FORD_BROWSE_PAGE;
SET BR.FORD_BROWSE
	BR.FORD_BROWSE_WO_PRD;
RUN;

PROC SQL;
CREATE TABLE BR.FORD_BROWSE_PAGE_SUM AS
SELECT  
		EMAIL_ADDRESS,
		CATEGORY_NUM_2,
		SUM(sec_on_page) AS sec_on_page,
		SUM(PAGE_VIEWS) AS PAGE_VIEWS,
		'NEW' AS BUYER_STATUS
FROM BR.FORD_BROWSE_PAGE
GROUP BY EMAIL_ADDRESS,
		CATEGORY_NUM_2
ORDER BY EMAIL_ADDRESS,
		CATEGORY_NUM_2;
QUIT;



/************* 2. EVENTS_CNTS (W/ PRODUCT_CODE): 14 days browsing befor first order date *************/

/*separate from page view reason: 1 page view may have multiple event_type_id 
--> if wrap them up in \through, will double/triple/.. the metrics of sec_on_page and page_views*/ 
/*eg. under one page view session, if I added a product to bag and added to fav, 
then in page_view table, I would only have 1 record with total seconds I stayed on this page.
However in saks_events table, I would have 2 records -- 1 for add to cart and 1 for add to fav.
Therefore, we can't have the sec_on_page and page_views under each category + each event type*/

/********** 2.1 EVENTS RELATED WITH PRODUCT PAGE VIEWS(PDP) *********/
proc sql; 
connect to ASTER as ast (DSN=Aster);
create table FORD_BROWSE_EVENT as
SELECT * FROM connection to ast (
SELECT 
		UPPER(A.EMAIL) AS EMAIL_ADDRESS,
		A.GROUP_ID,
		C.EVENT_TYPE_ID,
		SUM(C.EVENTS_CNTS) AS EVENTS_CNTS
FROM
	(SELECT 
		UUID.EMAIL,
		PRD.GROUP_ID,
		VIEWS.DATE_FILTER
	FROM 
		dw.fact_omni_saks_page_views  VIEWS
	INNER JOIN 
	(select distinct product_code, GROUP_ID from replicator.hbc_dw_mrep_bi_product) AS PRD  
	ON VIEWS.PRODUCT_CODE=PRD.product_code
	INNER JOIN 
		(SELECT DISTINCT 
				VISITOR_DEVICE_UUID, 
				VISITOR_UUID, 
				EMAIL 	
		FROM dw.dim_visitor_devices
		WHERE TRIM(EMAIL) <> "" AND SOURCE = 'saks'
		) UUID 
	ON VIEWS.VISITOR_DEVICE_UUID = UUID. VISITOR_DEVICE_UUID 
	INNER JOIN 
		(SELECT DISTINCT 			
				UUID2.EMAIL,
				MIN(DATE_FILTER) AS FORD
		FROM dw.fact_omni_saks_events  events
		INNER JOIN
			(SELECT DISTINCT VISITOR_DEVICE_UUID, VISITOR_UUID, EMAIL FROM dw.dim_visitor_devices
			WHERE TRIM(EMAIL) <> "" AND SOURCE = 'saks') UUID2 
		ON events.VISITOR_DEVICE_UUID = UUID2. VISITOR_DEVICE_UUID 
		WHERE EVENTS.EVENT_TYPE_ID = 9 /*purchase*/
		GROUP BY UUID2.EMAIL 
	) FORD
	ON UUID.EMAIL=FORD.EMAIL AND VIEWS.DATE_FILTER<=FORD.FORD AND VIEWS.DATE_FILTER>=(FORD.FORD - interval '336 hours')
WHERE 
		LOWER(VIEWS.page_type) IN ('product detail','quick look','quicklook','productdetail')
		AND TRIM(VIEWS.PRODUCT_CODE) <> ""
) A

INNER JOIN
(SELECT DISTINCT 
		UUID4.EMAIL,
		PRD4.GROUP_ID,
		DATE_FILTER,
		EVENT_TYPE_ID, 
		SUM(EVENTS_CNTS) AS EVENTS_CNTS
		FROM 
			(select  
				VISITOR_DEVICE_UUID,
				PRODUCT_CODE, 
				DATE_FILTER,
				EVENT_TYPE_ID, 
				COUNT(DISTINCT EVENT_UUID) AS EVENTS_CNTS
		 	from dw.fact_omni_saks_events  events
			where PRODUCT_CODE IS NOT NULL 
			group by VISITOR_DEVICE_UUID,  PRODUCT_CODE, DATE_FILTER,EVENT_TYPE_ID) EVENTS4  
		INNER JOIN 
			(SELECT DISTINCT VISITOR_DEVICE_UUID, VISITOR_UUID, EMAIL FROM dw.dim_visitor_devices
			 WHERE TRIM(EMAIL) <> "" AND SOURCE = 'saks') AS UUID4 
		ON EVENTS4.VISITOR_DEVICE_UUID = UUID4. VISITOR_DEVICE_UUID
		INNER JOIN 
		(select distinct product_code, GROUP_ID from replicator.hbc_dw_mrep_bi_product) AS PRD4  
		ON EVENTS4.PRODUCT_CODE=PRD4.product_code 
GROUP BY UUID4.EMAIL,PRD4.GROUP_ID,DATE_FILTER,EVENT_TYPE_ID
)C
ON A.EMAIL=C.EMAIL AND A.GROUP_ID=C.GROUP_ID AND A.DATE_FILTER=C.DATE_FILTER

GROUP BY A.EMAIL, A.GROUP_ID, C.EVENT_TYPE_ID
);
Disconnect from ast;
Quit;
/*running time: 1h reduced to 12mins!! after adding - interval '336 hours'!!*/
/*proc sql; select min(datepart(FORD)) format date9. from ford_browse; quit;*/
/*01JAN2017*/


PROC SORT DATA=FORD_BROWSE_EVENT; BY EMAIL_ADDRESS; RUN;
PROC SORT DATA=FORD_BEFORE_2017; BY EMAIL_ADDRESS; RUN;
DATA FORD_BROWSE_EVENT;
MERGE FORD_BROWSE_EVENT(IN=A) FORD_BEFORE_2017(IN=B);
BY EMAIL_ADDRESS;
IF A AND NOT B;
RUN;

PROC SORT DATA=FANLI.CATEGORY_MAP; BY GROUP_ID; RUN;
PROC SORT DATA=FORD_BROWSE_EVENT; BY GROUP_ID; RUN;
DATA BR.FORD_BROWSE_EVENT;
MERGE FORD_BROWSE_EVENT(IN=A) FANLI.CATEGORY_MAP(IN=B KEEP=GROUP_ID CATEGORY_NUM_2);
BY GROUP_ID;
IF A AND B;
DROP GROUP_ID;
RUN;

/*ADD EVENT_NM*/
PROC SQL; SELECT DISTINCT EVENT_TYPE_ID FROM BR.FORD_BROWSE_EVENT; QUIT;

/*PROC IMPORT OUT=BR.ASTER_EVENT_NM*/
/*	DATAFILE='I:\2018 Analytics\Candice\Saks\ASTER_EVENT.csv'*/
/*	DBMS=CSV REPLACE;*/
/*	DELIMITER=',';*/
/*	GETNAMES=YES;*/
/*RUN;*/

PROC SORT DATA=BR.FORD_BROWSE_EVENT; BY EVENT_TYPE_ID; RUN;
PROC SORT DATA=BR.ASTER_EVENT_NM; BY EVENT_TYPE_ID; RUN;

DATA BR.FORD_BROWSE_EVENT;
MERGE BR.FORD_BROWSE_EVENT(IN=A) BR.ASTER_EVENT_NM(IN=B KEEP=EVENT_TYPE_ID EVENT_NM);
BY EVENT_TYPE_ID;
IF A AND B;
drop EVENT_TYPE_ID;
RUN;

PROC SQL;
CREATE TABLE BR.FORD_BROWSE_EVENT AS
SELECT DISTINCT 
		EMAIL_ADDRESS,
		EVENTS_CNTS,
		EVENT_NM,
		CATEGORY_NUM_2
FROM BR.FORD_BROWSE_EVENT;
QUIT;


/*********** 2.2 WHEN PRODUCT_CODE IS NULL -- TOP,LEFT NAV & REFINEMENT **********/
proc sql; 
connect to ASTER as ast (DSN=Aster);
create table FORD_BROWSE_WO_PRD_EVENT as
SELECT * FROM connection to ast (
SELECT 
		UPPER(A.EMAIL) AS EMAIL_ADDRESS,
		A.VALUE2,
		C.EVENT_TYPE_ID,
		SUM(C.EVENTS_CNTS) AS EVENTS_CNTS
FROM
	(SELECT 
		UUID.EMAIL,
		VALUE2,
		VIEWS.DATE_FILTER
	FROM 
		dw.fact_omni_saks_page_views  VIEWS
	INNER JOIN 
	(select  
				VISITOR_DEVICE_UUID,
				session_uuid,
				PAGE_VIEW_UUID,
				(CASE 
		WHEN VALUE2 LIKE '%beauty%' OR VALUE2 LIKE '%de peau beaut%' OR VALUE2 LIKE '%la mer%' 
			OR VALUE2 LIKE '%laura mercier%' OR VALUE2 LIKE '%la prairie%' OR VALUE2 LIKE '%sk-ii%' 
			OR VALUE2 LIKE '%nars%' OR VALUE2 LIKE '%shiseido%' OR VALUE2 LIKE '%chantecaille%' 
			OR VALUE2 LIKE '%diptyque%' OR VALUE2 LIKE '%guerlain%' OR VALUE2 LIKE '%est&#233;e lauder%' 
			OR VALUE2 LIKE '%aesop%' OR VALUE2 LIKE '%foreo%' OR VALUE2 LIKE '%jo malone%' 
			OR VALUE2 LIKE '%clarins%' OR VALUE2 LIKE '%clinique%' OR VALUE2 LIKE '%lipstick%' 
			OR VALUE2 LIKE '%eyebrows%' OR VALUE2 LIKE '%foundation%' OR VALUE2 LIKE '%bb cream%' THEN 1
		WHEN VALUE2 LIKE '%womensapparel%' OR VALUE2 LIKE '%sweaters%' OR VALUE2 LIKE '%contemporary%'  
			OR VALUE2 LIKE "%women's apparel%" THEN 2
		WHEN VALUE2 LIKE '%designer%' THEN 3
		WHEN VALUE2 LIKE '%homehitech%' OR VALUE2 LIKE '%candles%' THEN 4
		WHEN VALUE2 LIKE '%justkids%' then 5
		WHEN VALUE2 LIKE '%themensstore%' OR VALUE2 LIKE "%men's%" THEN 6
		WHEN VALUE2 LIKE '%shoes%' OR VALUE2 LIKE '%sandals%' OR VALUE2 LIKE '%sneakers%' 
			OR VALUE2 LIKE '%boots%' OR VALUE2 LIKE '%nicholas kirkwood%' OR VALUE2 LIKE '%manolo blahnik%' 
			THEN 81
		WHEN VALUE2 LIKE '%handbag%' OR VALUE2 LIKE '%crossbody bag%' OR VALUE2 LIKE '%shoulder bag%' then 82
		WHEN VALUE2 LIKE '%jewelryaccessories%' OR VALUE2 LIKE '%accessories%' OR VALUE2 LIKE '%belts%' OR VALUE2 LIKE '%bracelets%' 
			OR VALUE2 LIKE '%scarves%' OR VALUE2 LIKE '%sunglasses%' OR VALUE2 LIKE '%card cases%' 
			OR VALUE2 LIKE '%wallets%' OR VALUE2 LIKE '%earrings%' OR VALUE2 LIKE '%rings%' THEN 10 
	END) AS VALUE2, 
				EVENT_TYPE_ID,
				DATE_FILTER
		 	from dw.fact_omni_saks_events  EVENT
			where PRODUCT_CODE IS NULL AND EVENT_TYPE_ID IN (1, 8, 10)
	) EVENTS  
	ON VIEWS.VISITOR_DEVICE_UUID=EVENTS.VISITOR_DEVICE_UUID AND VIEWS.session_uuid=EVENTS.session_uuid
		AND VIEWS.PAGE_VIEW_UUID=EVENTS.PAGE_VIEW_UUID AND VIEWS.DATE_FILTER=EVENTS.DATE_FILTER
	INNER JOIN 
	(SELECT DISTINCT 
				VISITOR_DEVICE_UUID, 
				VISITOR_UUID, 
				EMAIL 	
		FROM dw.dim_visitor_devices
		WHERE TRIM(EMAIL) <> "" AND SOURCE = 'saks'
	) UUID 
	ON VIEWS.VISITOR_DEVICE_UUID = UUID. VISITOR_DEVICE_UUID 
	INNER JOIN 
	(SELECT DISTINCT 			
				UUID2.EMAIL,
				MIN(DATE_FILTER) AS FORD
		FROM dw.fact_omni_saks_events  EVENT2
		INNER JOIN
			(SELECT DISTINCT VISITOR_DEVICE_UUID, VISITOR_UUID, EMAIL FROM dw.dim_visitor_devices
			WHERE TRIM(EMAIL) <> "" AND SOURCE = 'saks') UUID2 
		ON EVENT2.VISITOR_DEVICE_UUID = UUID2. VISITOR_DEVICE_UUID 
		WHERE EVENT2.EVENT_TYPE_ID = 9 /*purchase*/
		GROUP BY UUID2.EMAIL 
	) FORD
	ON UUID.EMAIL=FORD.EMAIL AND VIEWS.DATE_FILTER<=FORD.FORD AND VIEWS.DATE_FILTER>=(FORD.FORD - interval '336 hours')
WHERE VIEWS.PRODUCT_CODE IS NULL
) A

INNER JOIN
(SELECT DISTINCT 
		UUID4.EMAIL,
		VALUE2,
		DATE_FILTER,
		EVENT_TYPE_ID, 
		SUM(EVENTS_CNTS) AS EVENTS_CNTS
		FROM 
			(select  
				VISITOR_DEVICE_UUID,
				(CASE 
		WHEN VALUE2 LIKE '%beauty%' OR VALUE2 LIKE '%de peau beaut%' OR VALUE2 LIKE '%la mer%' 
			OR VALUE2 LIKE '%laura mercier%' OR VALUE2 LIKE '%la prairie%' OR VALUE2 LIKE '%sk-ii%' 
			OR VALUE2 LIKE '%nars%' OR VALUE2 LIKE '%shiseido%' OR VALUE2 LIKE '%chantecaille%' 
			OR VALUE2 LIKE '%diptyque%' OR VALUE2 LIKE '%guerlain%' OR VALUE2 LIKE '%est&#233;e lauder%' 
			OR VALUE2 LIKE '%aesop%' OR VALUE2 LIKE '%foreo%' OR VALUE2 LIKE '%jo malone%' 
			OR VALUE2 LIKE '%clarins%' OR VALUE2 LIKE '%clinique%' OR VALUE2 LIKE '%lipstick%' 
			OR VALUE2 LIKE '%eyebrows%' OR VALUE2 LIKE '%foundation%' OR VALUE2 LIKE '%bb cream%' THEN 1
		WHEN VALUE2 LIKE '%womensapparel%' OR VALUE2 LIKE '%sweaters%' OR VALUE2 LIKE '%contemporary%'  
			OR VALUE2 LIKE "%women's apparel%" THEN 2
		WHEN VALUE2 LIKE '%designer%' THEN 3
		WHEN VALUE2 LIKE '%homehitech%' OR VALUE2 LIKE '%candles%' THEN 4
		WHEN VALUE2 LIKE '%justkids%' then 5
		WHEN VALUE2 LIKE '%themensstore%' OR VALUE2 LIKE "%men's%" THEN 6
		WHEN VALUE2 LIKE '%shoes%' OR VALUE2 LIKE '%sandals%' OR VALUE2 LIKE '%sneakers%' 
			OR VALUE2 LIKE '%boots%' OR VALUE2 LIKE '%nicholas kirkwood%' OR VALUE2 LIKE '%manolo blahnik%' 
			THEN 81
		WHEN VALUE2 LIKE '%handbag%' OR VALUE2 LIKE '%crossbody bag%' OR VALUE2 LIKE '%shoulder bag%' then 82
		WHEN VALUE2 LIKE '%jewelryaccessories%' OR VALUE2 LIKE '%accessories%' OR VALUE2 LIKE '%belts%' OR VALUE2 LIKE '%bracelets%' 
			OR VALUE2 LIKE '%scarves%' OR VALUE2 LIKE '%sunglasses%' OR VALUE2 LIKE '%card cases%' 
			OR VALUE2 LIKE '%wallets%' OR VALUE2 LIKE '%earrings%' OR VALUE2 LIKE '%rings%' THEN 10 
	END) AS VALUE2 ,
				DATE_FILTER,
				EVENT_TYPE_ID, 
				COUNT(DISTINCT EVENT_UUID) AS EVENTS_CNTS
		 	from dw.fact_omni_saks_events  
			where PRODUCT_CODE IS NULL AND EVENT_TYPE_ID IN (1, 8, 10)
			group by VISITOR_DEVICE_UUID, VALUE2, DATE_FILTER,EVENT_TYPE_ID) EVENTS4  
		INNER JOIN 
			(SELECT DISTINCT VISITOR_DEVICE_UUID, VISITOR_UUID, EMAIL FROM dw.dim_visitor_devices
			 WHERE TRIM(EMAIL) <> "" AND SOURCE = 'saks') AS UUID4 
		ON EVENTS4.VISITOR_DEVICE_UUID = UUID4. VISITOR_DEVICE_UUID
GROUP BY UUID4.EMAIL, VALUE2,DATE_FILTER,EVENT_TYPE_ID
)C
ON A.EMAIL=C.EMAIL  AND A.VALUE2=C.VALUE2 AND A.DATE_FILTER=C.DATE_FILTER  
GROUP BY A.EMAIL, A.VALUE2, C.EVENT_TYPE_ID
);
Disconnect from ast;
Quit;
/*running time: 13mins*/
/* NO NEED FOR P1=11--ALL OTHER */

PROC SORT DATA=FORD_BROWSE_WO_PRD_EVENT; BY EMAIL_ADDRESS; RUN;
PROC SORT DATA=FORD_BEFORE_2017; BY EMAIL_ADDRESS; RUN;
DATA BR.FORD_BROWSE_WO_PRD_EVENT;
MERGE FORD_BROWSE_WO_PRD_EVENT(IN=A) FORD_BEFORE_2017(IN=B);
BY EMAIL_ADDRESS;
IF A AND NOT B;
RUN;

DATA BR.FORD_BROWSE_WO_PRD_EVENT;
SET BR.FORD_BROWSE_WO_PRD_EVENT;
FORMAT EVENT_NM $10.;
IF EVENT_TYPE_ID = 1 THEN EVENT_NM ='REFINE';
IF EVENT_TYPE_ID = 8 THEN EVENT_NM ='TOP_NAV';
IF EVENT_TYPE_ID = 10 THEN EVENT_NM ='LEFT_NAV';
DROP EVENT_TYPE_ID;
RUN;

PROC SQL;
CREATE TABLE BR.FORD_BROWSE_WO_PRD_EVENT AS
SELECT DISTINCT 
		EMAIL_ADDRESS,
		EVENTS_CNTS,
		EVENT_NM,
		VALUE2 AS CATEGORY_NUM_2 LABEL 'CATEGORY_NUM_2'
FROM BR.FORD_BROWSE_WO_PRD_EVENT;
QUIT;


/************ WRAP UP ************/
DATA BR.FORD_BROWSE_ALL_EVENT;
SET BR.FORD_BROWSE_EVENT
	BR.FORD_BROWSE_WO_PRD_EVENT;
RUN;

PROC SQL;
CREATE TABLE BR.FORD_BROWSE_ALL_EVENT_SUM AS
SELECT  
		EMAIL_ADDRESS,
		CATEGORY_NUM_2,
		EVENT_NM,
		SUM(EVENTS_CNTS) AS EVENTS_CNTS
FROM BR.FORD_BROWSE_ALL_EVENT
GROUP BY EMAIL_ADDRESS,
		CATEGORY_NUM_2,
		EVENT_NM
ORDER BY EMAIL_ADDRESS,
		CATEGORY_NUM_2,
		EVENT_NM;
QUIT;


/*skip*/
PROC SORT DATA=FORD_BROWSE; BY EMAIL_ADDRESS GROUP_ID; RUN;
PROC SORT DATA=FORD_BROWSE_EVENT; BY EMAIL_ADDRESS GROUP_ID; RUN;

DATA BR.FORD_BROWSE;
MERGE FORD_BROWSE(IN=A) FORD_BROWSE_EVENT(IN=B);
BY EMAIL_ADDRESS GROUP_ID;
IF A;
RUN;





/****************************************************************************************/
/************** NON_BUYER BROWSE: 14 days browsing before last browse date **************/
/****************************************************************************************/


/********** 1.1 EVENTS RELATED WITH PRODUCT PAGE VIEWS(PDP) *********/
/** EVENTS INCLUDE: ADD_FAV, ADD_TB, ALT_IMG, COLOUR, SIZE & VIDEO **/
proc sql; 
connect to ASTER as ast (DSN=Aster);
create table nonbuyer_BROWSE as
SELECT * FROM connection to ast (

SELECT  
	UPPER(FINAL.EMAIL) AS EMAIL_ADDRESS,
	FINAL.GROUP_ID,
	SUM(FINAL.SEC_ON_PAGE) AS SEC_ON_PAGE,
	SUM(FINAL.PAGE_VIEWS) AS PAGE_VIEWS
FROM 
(
SELECT
		EMAIL.EMAIL,
		PRD.GROUP_ID,
		A.DATE_FILTER,
		SUM(A.sec_on_page) AS SEC_ON_PAGE,
		COUNT(A.page_view_uuid) AS PAGE_VIEWS
FROM 
	dw.fact_omni_saks_page_views  A
INNER JOIN 
	(select distinct product_code, GROUP_ID from replicator.hbc_dw_mrep_bi_product) AS PRD  
ON A.PRODUCT_CODE=PRD.product_code

INNER JOIN
	(SELECT DISTINCT 
		VISITOR_DEVICE_UUID, 
		VISITOR_UUID, 
		EMAIL 	
	FROM dw.dim_visitor_devices
	WHERE TRIM(EMAIL) <> "" AND SOURCE = 'saks'
	) EMAIL
ON A.VISITOR_DEVICE_UUID = EMAIL.VISITOR_DEVICE_UUID 

INNER JOIN
	(	
		SELECT DISTINCT 			
			UUID2.EMAIL
		FROM dw.fact_omni_saks_events  events
		INNER JOIN
		(SELECT DISTINCT VISITOR_DEVICE_UUID, VISITOR_UUID, EMAIL FROM dw.dim_visitor_devices
			WHERE TRIM(EMAIL) <> "" AND SOURCE = 'saks') UUID2 
		ON events.VISITOR_DEVICE_UUID = UUID2. VISITOR_DEVICE_UUID 
		EXCEPT 
		SELECT DISTINCT 			
				B.EMAIL
		FROM dw.fact_omni_saks_events  A
		INNER JOIN
			(SELECT DISTINCT VISITOR_DEVICE_UUID, VISITOR_UUID, EMAIL FROM dw.dim_visitor_devices
			WHERE TRIM(EMAIL) <> "" AND SOURCE = 'saks') B 
		ON A.VISITOR_DEVICE_UUID = B. VISITOR_DEVICE_UUID 
		WHERE A.EVENT_TYPE_ID = 9  AND TRIM(A.PRODUCT_CODE) <> "" 
	) NON
ON EMAIL.EMAIL=NON.EMAIL 

INNER JOIN 
		(SELECT DISTINCT 			
				UUID3.EMAIL,
				MAX(DATE_FILTER) AS LBRD  /*LAST BROWSE DATE*/
		FROM dw.fact_omni_saks_page_views  A2
		INNER JOIN
			(SELECT DISTINCT VISITOR_DEVICE_UUID, VISITOR_UUID, EMAIL FROM dw.dim_visitor_devices
			WHERE TRIM(EMAIL) <> "" AND SOURCE = 'saks') UUID3 
		ON A2.VISITOR_DEVICE_UUID = UUID3.VISITOR_DEVICE_UUID 
		WHERE LOWER(A2.page_type) IN ('product detail','quick look','quicklook','productdetail')
			AND TRIM(A2.PRODUCT_CODE) <> ""
		GROUP BY UUID3.EMAIL 
		) LBRD
	ON EMAIL.EMAIL=LBRD.EMAIL AND A.DATE_FILTER<=LBRD.LBRD AND A.DATE_FILTER>=(LBRD.LBRD - interval '336 hours')
WHERE 
		LOWER(A.page_type) IN ('product detail','quick look','quicklook','productdetail')
		AND TRIM(A.PRODUCT_CODE) <> ""
GROUP BY 
		EMAIL.EMAIL,
		PRD.GROUP_ID,
		A.DATE_FILTER
)FINAL
GROUP BY FINAL.EMAIL,
		FINAL.GROUP_ID
);
Disconnect from ast;
Quit;
/*14 mins*/

/*exclude actual buyer*/
DATA BUYER_EML;
SET BR.FORD_ONLINE_EML;
KEEP EMAIL_ADDRESS;
RUN;

PROC SORT DATA=nonbuyer_BROWSE; BY EMAIL_ADDRESS; RUN;
PROC SORT DATA=BUYER_EML; BY EMAIL_ADDRESS; RUN;
DATA br.nonbuyer_BROWSE;
MERGE nonbuyer_BROWSE(IN=A) BUYER_EML(IN=B);
BY EMAIL_ADDRESS;
IF A AND NOT B;
RUN;

PROC SORT DATA=FANLI.CATEGORY_MAP; BY GROUP_ID; RUN;
PROC SORT DATA=br.nonbuyer_BROWSE; BY GROUP_ID; RUN;
DATA br.nonbuyer_BROWSE;
MERGE br.nonbuyer_BROWSE(IN=A) FANLI.CATEGORY_MAP(IN=B KEEP=GROUP_ID CATEGORY_NUM_2);
BY GROUP_ID;
IF A AND B;
DROP GROUP_ID;
RUN;

PROC SQL; 
CREATE TABLE BR.nonbuyer_BROWSE AS
SELECT DISTINCT 
		EMAIL_ADDRESS,
		SEC_ON_PAGE,
		PAGE_VIEWS,
		CATEGORY_NUM_2
FROM BR.nonbuyer_BROWSE;
QUIT;

/*********** 1.2. ADDITONAL EVENTS WHEN PRODUCT_CODE EMPTY **********/
/**EVENTS INCLUDE: TOP NAVIGATE, LEFT NAVIGATE AND REFINEMENT**/
/*Top Nav Click: 8*/
/*Left Nav Click: 10*/
/*Refinement: 1*/

proc sql; 
connect to ASTER as ast (DSN=Aster);
create table NONBUYER_BROWSE_WO_PRD as
SELECT * FROM connection to ast (
SELECT 
		UPPER(FINAL.EMAIL) AS EMAIL_ADDRESS,
		VALUE2,
		SUM(sec_on_page) AS SEC_ON_PAGE,
		SUM(PAGE_VIEWS) AS PAGE_VIEWS
FROM
	(SELECT 
		UUID.EMAIL,
		VALUE2,
		VIEWS.DATE_FILTER,
		SUM(sec_on_page) AS SEC_ON_PAGE,
		COUNT(VIEWS.page_view_uuid) AS PAGE_VIEWS
	FROM 
		dw.fact_omni_saks_page_views  VIEWS
	INNER JOIN 
	(select  
				VISITOR_DEVICE_UUID,
				session_uuid,
				PAGE_VIEW_UUID,
				(CASE 
		WHEN VALUE2 LIKE '%beauty%' OR VALUE2 LIKE '%de peau beaut%' OR VALUE2 LIKE '%la mer%' 
			OR VALUE2 LIKE '%laura mercier%' OR VALUE2 LIKE '%la prairie%' OR VALUE2 LIKE '%sk-ii%' 
			OR VALUE2 LIKE '%nars%' OR VALUE2 LIKE '%shiseido%' OR VALUE2 LIKE '%chantecaille%' 
			OR VALUE2 LIKE '%diptyque%' OR VALUE2 LIKE '%guerlain%' OR VALUE2 LIKE '%est&#233;e lauder%' 
			OR VALUE2 LIKE '%aesop%' OR VALUE2 LIKE '%foreo%' OR VALUE2 LIKE '%jo malone%' 
			OR VALUE2 LIKE '%clarins%' OR VALUE2 LIKE '%clinique%' OR VALUE2 LIKE '%lipstick%' 
			OR VALUE2 LIKE '%eyebrows%' OR VALUE2 LIKE '%foundation%' OR VALUE2 LIKE '%bb cream%' THEN 1
		WHEN VALUE2 LIKE '%womensapparel%' OR VALUE2 LIKE '%sweaters%' OR VALUE2 LIKE '%contemporary%'  
			OR VALUE2 LIKE "%women's apparel%" THEN 2
		WHEN VALUE2 LIKE '%designer%' THEN 3
		WHEN VALUE2 LIKE '%homehitech%' OR VALUE2 LIKE '%candles%' THEN 4
		WHEN VALUE2 LIKE '%justkids%' then 5
		WHEN VALUE2 LIKE '%themensstore%' OR VALUE2 LIKE "%men's%" THEN 6
		WHEN VALUE2 LIKE '%shoes%' OR VALUE2 LIKE '%sandals%' OR VALUE2 LIKE '%sneakers%' 
			OR VALUE2 LIKE '%boots%' OR VALUE2 LIKE '%nicholas kirkwood%' OR VALUE2 LIKE '%manolo blahnik%' 
			THEN 81
		WHEN VALUE2 LIKE '%handbag%' OR VALUE2 LIKE '%crossbody bag%' OR VALUE2 LIKE '%shoulder bag%' then 82
		WHEN VALUE2 LIKE '%jewelryaccessories%' OR VALUE2 LIKE '%accessories%' OR VALUE2 LIKE '%belts%' OR VALUE2 LIKE '%bracelets%' 
			OR VALUE2 LIKE '%scarves%' OR VALUE2 LIKE '%sunglasses%' OR VALUE2 LIKE '%card cases%' 
			OR VALUE2 LIKE '%wallets%' OR VALUE2 LIKE '%earrings%' OR VALUE2 LIKE '%rings%' THEN 10 
	END) AS VALUE2, 
				EVENT_TYPE_ID,
				DATE_FILTER
		 	from dw.fact_omni_saks_events  EVENT
			where PRODUCT_CODE IS NULL AND EVENT_TYPE_ID IN (1, 8, 10)
	) EVENTS  
	ON VIEWS.VISITOR_DEVICE_UUID=EVENTS.VISITOR_DEVICE_UUID AND VIEWS.session_uuid=EVENTS.session_uuid
		AND VIEWS.PAGE_VIEW_UUID=EVENTS.PAGE_VIEW_UUID AND VIEWS.DATE_FILTER=EVENTS.DATE_FILTER

	/*ADD EMAIL*/
	INNER JOIN 
	(SELECT DISTINCT 
				VISITOR_DEVICE_UUID, 
				VISITOR_UUID, 
				EMAIL 	
		FROM dw.dim_visitor_devices
		WHERE TRIM(EMAIL) <> "" AND SOURCE = 'saks'
	) UUID 
	ON VIEWS.VISITOR_DEVICE_UUID = UUID. VISITOR_DEVICE_UUID 

	/*EXCLUDE BUYER'S EMAIL*/
	INNER JOIN
	(SELECT DISTINCT 			
			B.EMAIL
		FROM dw.fact_omni_saks_events  A
		INNER JOIN
		(SELECT DISTINCT VISITOR_DEVICE_UUID, VISITOR_UUID, EMAIL FROM dw.dim_visitor_devices
			WHERE TRIM(EMAIL) <> "" AND SOURCE = 'saks') B 
		ON A.VISITOR_DEVICE_UUID = B.VISITOR_DEVICE_UUID 
	EXCEPT 
	SELECT DISTINCT 			
			D.EMAIL
		FROM dw.fact_omni_saks_events  C
	INNER JOIN
	(SELECT DISTINCT VISITOR_DEVICE_UUID, VISITOR_UUID, EMAIL FROM dw.dim_visitor_devices
		WHERE TRIM(EMAIL) <> "" AND SOURCE = 'saks') D 
	ON C.VISITOR_DEVICE_UUID = D. VISITOR_DEVICE_UUID 
	WHERE C.EVENT_TYPE_ID = 9 AND TRIM(C.PRODUCT_CODE) <> ""
	) FORD
	ON UUID.EMAIL=FORD.EMAIL 

INNER JOIN 
		(SELECT DISTINCT 			
				UUID3.EMAIL,
				MAX(DATE_FILTER) AS LBRD  /*LAST BROWSE DATE*/
		FROM dw.fact_omni_saks_page_views  A2
		INNER JOIN
			(SELECT DISTINCT VISITOR_DEVICE_UUID, VISITOR_UUID, EMAIL FROM dw.dim_visitor_devices
			WHERE TRIM(EMAIL) <> "" AND SOURCE = 'saks') UUID3 
		ON A2.VISITOR_DEVICE_UUID = UUID3.VISITOR_DEVICE_UUID 
		WHERE A2.PRODUCT_CODE IS NULL
		GROUP BY UUID3.EMAIL 
		) LBRD
	ON UUID.EMAIL=LBRD.EMAIL AND VIEWS.DATE_FILTER<=LBRD.LBRD AND VIEWS.DATE_FILTER>=(LBRD.LBRD - interval '336 hours')
WHERE  VIEWS.PRODUCT_CODE IS NULL
GROUP BY 
		UUID.EMAIL,
		EVENTS.VALUE2,
		VIEWS.DATE_FILTER
)FINAL
GROUP BY FINAL.EMAIL,
		FINAL.VALUE2
);
Disconnect from ast;
Quit;
/*15mins*/


/*exclude actual buyer*/
PROC SORT DATA=NONBUYER_BROWSE_WO_PRD; BY EMAIL_ADDRESS; RUN;
PROC SORT DATA=BUYER_EML; BY EMAIL_ADDRESS; RUN;
DATA br.NONBUYER_BROWSE_WO_PRD;
MERGE NONBUYER_BROWSE_WO_PRD(IN=A) BUYER_EML(IN=B);
BY EMAIL_ADDRESS;
IF A AND NOT B;
RUN;

PROC SQL; 
CREATE TABLE BR.NONBUYER_BROWSE_WO_PRD AS
SELECT DISTINCT 
		EMAIL_ADDRESS,
		SEC_ON_PAGE,
		PAGE_VIEWS,
		VALUE2 AS CATEGORY_NUM_2 LABEL 'CATEGORY_NUM_2'
FROM BR.NONBUYER_BROWSE_WO_PRD;
QUIT;


/******** WRAP UP ********/
DATA BR.nonbuyer_BROWSE_PAGE;
SET BR.nonbuyer_BROWSE
	BR.NONBUYER_BROWSE_WO_PRD;
RUN;

PROC SQL;
CREATE TABLE BR.nonbuyer_BROWSE_PAGE_SUM AS
SELECT  
		EMAIL_ADDRESS,
		CATEGORY_NUM_2,
		SUM(sec_on_page) AS sec_on_page,
		SUM(PAGE_VIEWS) AS PAGE_VIEWS,
		'NON' AS BUYER_STATUS
FROM BR.nonbuyer_BROWSE_PAGE
GROUP BY EMAIL_ADDRESS,
		CATEGORY_NUM_2
ORDER BY EMAIL_ADDRESS,
		CATEGORY_NUM_2;
QUIT;



/******************** 2. EVENTS_CNTS (W/ PRODUCT_CODE) ******************/
/******** 2.1 EVENTS RELATED WITH PRODUCT PAGE VIEWS(PDP) *******/
Proc sql; 
connect to ASTER as ast (DSN=Aster);
create table nonbuyer_BROWSE_EVENT as
SELECT * FROM connection to ast (

SELECT 
	UPPER(EMAIL) AS EMAIL_ADDRESS,
	GROUP_ID,
	EVENT_TYPE_ID,
	SUM(EVENTS_CNTS) AS EVENTS_CNTS
FROM 
(
SELECT
		EMAIL.EMAIL,
		PRD.GROUP_ID,
		A.DATE_FILTER,
		ID.EVENT_TYPE_ID,
		ID.EVENTS_CNTS
FROM 
dw.fact_omni_saks_page_views  A
INNER JOIN 
	(select distinct product_code, GROUP_ID from replicator.hbc_dw_mrep_bi_product) AS PRD  
ON A.PRODUCT_CODE=PRD.product_code
INNER JOIN
(SELECT DISTINCT 
		VISITOR_DEVICE_UUID, 
		VISITOR_UUID, 
		EMAIL 	
FROM dw.dim_visitor_devices
WHERE TRIM(EMAIL) <> "" AND SOURCE = 'saks'
) EMAIL
ON A.VISITOR_DEVICE_UUID = EMAIL. VISITOR_DEVICE_UUID 

INNER JOIN
	(	
		SELECT DISTINCT 			
			UUID2.EMAIL
		FROM dw.fact_omni_saks_events  events
		INNER JOIN
		(SELECT DISTINCT VISITOR_DEVICE_UUID, VISITOR_UUID, EMAIL FROM dw.dim_visitor_devices
			WHERE TRIM(EMAIL) <> "" AND SOURCE = 'saks') UUID2 
		ON events.VISITOR_DEVICE_UUID = UUID2. VISITOR_DEVICE_UUID 
		EXCEPT 
		SELECT DISTINCT 			
				B.EMAIL
		FROM dw.fact_omni_saks_events  A
		INNER JOIN
			(SELECT DISTINCT VISITOR_DEVICE_UUID, VISITOR_UUID, EMAIL FROM dw.dim_visitor_devices
			WHERE TRIM(EMAIL) <> "" AND SOURCE = 'saks') B 
		ON A.VISITOR_DEVICE_UUID = B. VISITOR_DEVICE_UUID 
		WHERE A.EVENT_TYPE_ID = 9  AND TRIM(A.PRODUCT_CODE) <> "" 
	) FORD
ON EMAIL.EMAIL=FORD.EMAIL 

INNER JOIN 
		(SELECT DISTINCT 			
				UUID3.EMAIL,
				MAX(DATE_FILTER) AS LBRD  /*LAST BROWSE DATE*/
		FROM dw.fact_omni_saks_page_views  A2
		INNER JOIN
			(SELECT DISTINCT VISITOR_DEVICE_UUID, VISITOR_UUID, EMAIL FROM dw.dim_visitor_devices
			WHERE TRIM(EMAIL) <> "" AND SOURCE = 'saks') UUID3 
		ON A2.VISITOR_DEVICE_UUID = UUID3.VISITOR_DEVICE_UUID 
		WHERE LOWER(A2.page_type) IN ('product detail','quick look','quicklook','productdetail')
			AND TRIM(A2.PRODUCT_CODE) <> ""
		GROUP BY UUID3.EMAIL 
		) LBRD
ON EMAIL.EMAIL=LBRD.EMAIL AND A.DATE_FILTER<=LBRD.LBRD AND A.DATE_FILTER>=(LBRD.LBRD - interval '336 hours')

INNER JOIN
	(SELECT  
		UUID4.EMAIL,
		PRD4.GROUP_ID,
		DATE_FILTER,
		EVENT_TYPE_ID, 
		SUM(EVENTS_CNTS) AS EVENTS_CNTS
	FROM 
		(select  
			VISITOR_DEVICE_UUID,
			PRODUCT_CODE, 
			DATE_FILTER,
			EVENT_TYPE_ID, 
			COUNT(DISTINCT  EVENT_UUID) AS EVENTS_CNTS
		 from dw.fact_omni_saks_events  
		 	where PRODUCT_CODE IS NOT NULL 
		 	group by VISITOR_DEVICE_UUID,  PRODUCT_CODE, DATE_FILTER,EVENT_TYPE_ID) EVENTS4  
		 INNER JOIN 
		(SELECT DISTINCT VISITOR_DEVICE_UUID, VISITOR_UUID, EMAIL FROM dw.dim_visitor_devices
		WHERE TRIM(EMAIL) <> "" AND SOURCE = 'saks') AS UUID4 
		ON EVENTS4.VISITOR_DEVICE_UUID = UUID4. VISITOR_DEVICE_UUID 
		INNER JOIN 
		(select distinct product_code, GROUP_ID from replicator.hbc_dw_mrep_bi_product) AS PRD4  
		ON EVENTS4.PRODUCT_CODE=PRD4.product_code 
		GROUP BY UUID4.EMAIL,PRD4.GROUP_ID,DATE_FILTER,EVENT_TYPE_ID
	)ID
ON EMAIL.EMAIL=ID.EMAIL AND PRD.GROUP_ID=ID.GROUP_ID AND A.DATE_FILTER=ID.DATE_FILTER 
WHERE LOWER(A.page_type) IN ('product detail','quick look','quicklook','productdetail')
	AND TRIM(A.PRODUCT_CODE) <> ""
) FINAL
GROUP BY 
		EMAIL,
		GROUP_ID,
		EVENT_TYPE_ID
);
Disconnect from ast;
Quit;
/*running time: 1h reduced to 12mins!! after adding - interval '336 hours'!!*/
/*proc sql; select min(datepart(FORD)) format date9. from ford_browse; quit;*/
/*01JAN2017*/


PROC SORT DATA=nonbuyer_BROWSE_EVENT; BY EMAIL_ADDRESS; RUN;
PROC SORT DATA=BUYER_EML; BY EMAIL_ADDRESS; RUN;
DATA nonbuyer_BROWSE_EVENT;
MERGE nonbuyer_BROWSE_EVENT(IN=A) BUYER_EML(IN=B);
BY EMAIL_ADDRESS;
IF A AND NOT B;
RUN;

PROC SORT DATA=FANLI.CATEGORY_MAP; BY GROUP_ID; RUN;
PROC SORT DATA=nonbuyer_BROWSE_EVENT; BY GROUP_ID; RUN;
DATA BR.nonbuyer_BROWSE_EVENT;
MERGE nonbuyer_BROWSE_EVENT(IN=A) FANLI.CATEGORY_MAP(IN=B KEEP=GROUP_ID CATEGORY_NUM_2);
BY GROUP_ID;
IF A AND B;
DROP GROUP_ID;
RUN;

PROC SORT DATA=BR.nonbuyer_BROWSE_EVENT; BY EVENT_TYPE_ID; RUN;
PROC SORT DATA=BR.ASTER_EVENT_NM; BY EVENT_TYPE_ID; RUN;

DATA BR.nonbuyer_BROWSE_EVENT;
MERGE BR.nonbuyer_BROWSE_EVENT(IN=A) BR.ASTER_EVENT_NM(IN=B KEEP=EVENT_TYPE_ID EVENT_NM);
BY EVENT_TYPE_ID;
IF A AND B;
drop EVENT_TYPE_ID;
RUN;

PROC SQL;
CREATE TABLE BR.nonbuyer_BROWSE_EVENT AS
SELECT DISTINCT 
		EMAIL_ADDRESS,
		EVENTS_CNTS,
		EVENT_NM,
		CATEGORY_NUM_2
FROM BR.nonbuyer_BROWSE_EVENT;
QUIT;


/*********** 2.2 WHEN PRODUCT_CODE = NULL -- TOP/LEFT NAV & REFINEMENT **********/
proc sql; 
connect to ASTER as ast (DSN=Aster);
create table NONBUYER_BR_WO_PRD_EVENT as
SELECT * FROM connection to ast (
SELECT 
		UPPER(A.EMAIL) AS EMAIL_ADDRESS,
		A.VALUE2,
		C.EVENT_TYPE_ID,
		SUM(C.EVENTS_CNTS) AS EVENTS_CNTS
FROM
	(SELECT 
		FORD.EMAIL,
		EVENTS1.VALUE2,
		VIEWS.DATE_FILTER
	FROM 
		dw.fact_omni_saks_page_views  VIEWS
	INNER JOIN 
	(select  
				VISITOR_DEVICE_UUID,
				session_uuid,
				PAGE_VIEW_UUID,
				(CASE 
		WHEN VALUE2 LIKE '%beauty%' OR VALUE2 LIKE '%de peau beaut%' OR VALUE2 LIKE '%la mer%' 
			OR VALUE2 LIKE '%laura mercier%' OR VALUE2 LIKE '%la prairie%' OR VALUE2 LIKE '%sk-ii%' 
			OR VALUE2 LIKE '%nars%' OR VALUE2 LIKE '%shiseido%' OR VALUE2 LIKE '%chantecaille%' 
			OR VALUE2 LIKE '%diptyque%' OR VALUE2 LIKE '%guerlain%' OR VALUE2 LIKE '%est&#233;e lauder%' 
			OR VALUE2 LIKE '%aesop%' OR VALUE2 LIKE '%foreo%' OR VALUE2 LIKE '%jo malone%' 
			OR VALUE2 LIKE '%clarins%' OR VALUE2 LIKE '%clinique%' OR VALUE2 LIKE '%lipstick%' 
			OR VALUE2 LIKE '%eyebrows%' OR VALUE2 LIKE '%foundation%' OR VALUE2 LIKE '%bb cream%' THEN 1
		WHEN VALUE2 LIKE '%womensapparel%' OR VALUE2 LIKE '%sweaters%' OR VALUE2 LIKE '%contemporary%'  
			OR VALUE2 LIKE "%women's apparel%" THEN 2
		WHEN VALUE2 LIKE '%designer%' THEN 3
		WHEN VALUE2 LIKE '%homehitech%' OR VALUE2 LIKE '%candles%' THEN 4
		WHEN VALUE2 LIKE '%justkids%' then 5
		WHEN VALUE2 LIKE '%themensstore%' OR VALUE2 LIKE "%men's%" THEN 6
		WHEN VALUE2 LIKE '%shoes%' OR VALUE2 LIKE '%sandals%' OR VALUE2 LIKE '%sneakers%' 
			OR VALUE2 LIKE '%boots%' OR VALUE2 LIKE '%nicholas kirkwood%' OR VALUE2 LIKE '%manolo blahnik%' 
			THEN 81
		WHEN VALUE2 LIKE '%handbag%' OR VALUE2 LIKE '%crossbody bag%' OR VALUE2 LIKE '%shoulder bag%' then 82
		WHEN VALUE2 LIKE '%jewelryaccessories%' OR VALUE2 LIKE '%accessories%' OR VALUE2 LIKE '%belts%' OR VALUE2 LIKE '%bracelets%' 
			OR VALUE2 LIKE '%scarves%' OR VALUE2 LIKE '%sunglasses%' OR VALUE2 LIKE '%card cases%' 
			OR VALUE2 LIKE '%wallets%' OR VALUE2 LIKE '%earrings%' OR VALUE2 LIKE '%rings%' THEN 10 
	END) AS VALUE2, 
				EVENT_TYPE_ID,
				DATE_FILTER
		 	from dw.fact_omni_saks_events  EVENT
			where PRODUCT_CODE IS NULL AND EVENT_TYPE_ID IN (1, 8, 10)
	) EVENTS1  
	ON VIEWS.VISITOR_DEVICE_UUID=EVENTS1.VISITOR_DEVICE_UUID AND VIEWS.session_uuid=EVENTS1.session_uuid
		AND VIEWS.PAGE_VIEW_UUID=EVENTS1.PAGE_VIEW_UUID AND VIEWS.DATE_FILTER=EVENTS1.DATE_FILTER

	INNER JOIN
	(	SELECT DISTINCT 
			UUID2.VISITOR_DEVICE_UUID,	
			UUID2.EMAIL
		FROM dw.fact_omni_saks_events  events2
		INNER JOIN
		(SELECT DISTINCT VISITOR_DEVICE_UUID, VISITOR_UUID, EMAIL FROM dw.dim_visitor_devices
			WHERE TRIM(EMAIL) <> "" AND SOURCE = 'saks') UUID2 
		ON events2.VISITOR_DEVICE_UUID = UUID2. VISITOR_DEVICE_UUID 
		EXCEPT 
		SELECT DISTINCT 	
				B.VISITOR_DEVICE_UUID,	
				B.EMAIL
		FROM dw.fact_omni_saks_events  A
		INNER JOIN
			(SELECT DISTINCT VISITOR_DEVICE_UUID, VISITOR_UUID, EMAIL FROM dw.dim_visitor_devices
			WHERE TRIM(EMAIL) <> "" AND SOURCE = 'saks') B 
		ON A.VISITOR_DEVICE_UUID = B. VISITOR_DEVICE_UUID 
		WHERE A.EVENT_TYPE_ID = 9  AND TRIM(A.PRODUCT_CODE) <> "" 
	) FORD
	ON VIEWS.VISITOR_DEVICE_UUID=FORD.VISITOR_DEVICE_UUID 

	INNER JOIN 
		(SELECT DISTINCT 			
				UUID3.EMAIL,
				MAX(DATE_FILTER) AS LBRD  /*LAST BROWSE DATE*/
		FROM dw.fact_omni_saks_page_views  A2
		INNER JOIN
			(SELECT DISTINCT VISITOR_DEVICE_UUID, VISITOR_UUID, EMAIL FROM dw.dim_visitor_devices
			WHERE TRIM(EMAIL) <> "" AND SOURCE = 'saks') UUID3 
		ON A2.VISITOR_DEVICE_UUID = UUID3.VISITOR_DEVICE_UUID 
		GROUP BY UUID3.EMAIL 
		) LBRD
	ON FORD.EMAIL=LBRD.EMAIL AND VIEWS.DATE_FILTER<=LBRD.LBRD AND VIEWS.DATE_FILTER>=(LBRD.LBRD - interval '336 hours')
WHERE VIEWS.PRODUCT_CODE IS NULL
) A

INNER JOIN
(SELECT DISTINCT 
		UUID4.EMAIL,
		VALUE2,
		DATE_FILTER,
		EVENT_TYPE_ID, 
		SUM(EVENTS_CNTS) AS EVENTS_CNTS
		FROM 
			(select  
				VISITOR_DEVICE_UUID,
				(CASE 
		WHEN VALUE2 LIKE '%beauty%' OR VALUE2 LIKE '%de peau beaut%' OR VALUE2 LIKE '%la mer%' 
			OR VALUE2 LIKE '%laura mercier%' OR VALUE2 LIKE '%la prairie%' OR VALUE2 LIKE '%sk-ii%' 
			OR VALUE2 LIKE '%nars%' OR VALUE2 LIKE '%shiseido%' OR VALUE2 LIKE '%chantecaille%' 
			OR VALUE2 LIKE '%diptyque%' OR VALUE2 LIKE '%guerlain%' OR VALUE2 LIKE '%est&#233;e lauder%' 
			OR VALUE2 LIKE '%aesop%' OR VALUE2 LIKE '%foreo%' OR VALUE2 LIKE '%jo malone%' 
			OR VALUE2 LIKE '%clarins%' OR VALUE2 LIKE '%clinique%' OR VALUE2 LIKE '%lipstick%' 
			OR VALUE2 LIKE '%eyebrows%' OR VALUE2 LIKE '%foundation%' OR VALUE2 LIKE '%bb cream%' THEN 1
		WHEN VALUE2 LIKE '%womensapparel%' OR VALUE2 LIKE '%sweaters%' OR VALUE2 LIKE '%contemporary%'  
			OR VALUE2 LIKE "%women's apparel%" THEN 2
		WHEN VALUE2 LIKE '%designer%' THEN 3
		WHEN VALUE2 LIKE '%homehitech%' OR VALUE2 LIKE '%candles%' THEN 4
		WHEN VALUE2 LIKE '%justkids%' then 5
		WHEN VALUE2 LIKE '%themensstore%' OR VALUE2 LIKE "%men's%" THEN 6
		WHEN VALUE2 LIKE '%shoes%' OR VALUE2 LIKE '%sandals%' OR VALUE2 LIKE '%sneakers%' 
			OR VALUE2 LIKE '%boots%' OR VALUE2 LIKE '%nicholas kirkwood%' OR VALUE2 LIKE '%manolo blahnik%' 
			THEN 81
		WHEN VALUE2 LIKE '%handbag%' OR VALUE2 LIKE '%crossbody bag%' OR VALUE2 LIKE '%shoulder bag%' then 82
		WHEN VALUE2 LIKE '%jewelryaccessories%' OR VALUE2 LIKE '%accessories%' OR VALUE2 LIKE '%belts%' OR VALUE2 LIKE '%bracelets%' 
			OR VALUE2 LIKE '%scarves%' OR VALUE2 LIKE '%sunglasses%' OR VALUE2 LIKE '%card cases%' 
			OR VALUE2 LIKE '%wallets%' OR VALUE2 LIKE '%earrings%' OR VALUE2 LIKE '%rings%' THEN 10 
	END) AS VALUE2 ,
				DATE_FILTER,
				EVENT_TYPE_ID, 
				COUNT(DISTINCT EVENT_UUID) AS EVENTS_CNTS
		 	from dw.fact_omni_saks_events  
			where PRODUCT_CODE IS NULL AND EVENT_TYPE_ID IN (1, 8, 10)
			group by VISITOR_DEVICE_UUID, VALUE2, DATE_FILTER,EVENT_TYPE_ID) EVENTS4  
		INNER JOIN 
			(SELECT DISTINCT VISITOR_DEVICE_UUID, VISITOR_UUID, EMAIL FROM dw.dim_visitor_devices
			 WHERE TRIM(EMAIL) <> "" AND SOURCE = 'saks') AS UUID4 
		ON EVENTS4.VISITOR_DEVICE_UUID = UUID4. VISITOR_DEVICE_UUID
GROUP BY UUID4.EMAIL, VALUE2,DATE_FILTER,EVENT_TYPE_ID
)C
ON A.EMAIL=C.EMAIL  AND A.VALUE2=C.VALUE2 AND A.DATE_FILTER=C.DATE_FILTER  
GROUP BY A.EMAIL, A.VALUE2, C.EVENT_TYPE_ID
);
Disconnect from ast;
Quit;
/*running time: 13mins*/
/* NO NEED FOR P1=11--ALL OTHER */

PROC SORT DATA=NONBUYER_BR_WO_PRD_EVENT; BY EMAIL_ADDRESS; RUN;
PROC SORT DATA=BUYER_EML; BY EMAIL_ADDRESS; RUN;
DATA NONBUYER_BR_WO_PRD_EVENT;
MERGE NONBUYER_BR_WO_PRD_EVENT(IN=A) BUYER_EML(IN=B);
BY EMAIL_ADDRESS;
IF A AND NOT B;
RUN;

DATA BR.NONBUYER_BR_WO_PRD_EVENT;
SET NONBUYER_BR_WO_PRD_EVENT;
FORMAT EVENT_NM $10.;
IF EVENT_TYPE_ID = 1 THEN EVENT_NM ='REFINE';
IF EVENT_TYPE_ID = 8 THEN EVENT_NM ='TOP_NAV';
IF EVENT_TYPE_ID = 10 THEN EVENT_NM ='LEFT_NAV';
DROP EVENT_TYPE_ID;
RUN;

PROC SQL;
CREATE TABLE BR.NONBUYER_BR_WO_PRD_EVENT AS
SELECT DISTINCT 
		EMAIL_ADDRESS,
		EVENTS_CNTS,
		EVENT_NM,
		VALUE2 AS CATEGORY_NUM_2 LABEL 'CATEGORY_NUM_2'
FROM BR.NONBUYER_BR_WO_PRD_EVENT;
QUIT;


/*************** WRAP UP ***************/
DATA BR.nonbuyer_BROWSE_ALL_EVENT;
SET BR.nonbuyer_BROWSE_EVENT
	BR.NONBUYER_BR_WO_PRD_EVENT;
RUN;

PROC SQL;
CREATE TABLE BR.nonbuyer_BROWSE_ALL_EVENT_SUM AS
SELECT  
		EMAIL_ADDRESS,
		CATEGORY_NUM_2,
		EVENT_NM,
		SUM(EVENTS_CNTS) AS EVENTS_CNTS
FROM BR.nonbuyer_BROWSE_ALL_EVENT
GROUP BY EMAIL_ADDRESS,
		CATEGORY_NUM_2,
		EVENT_NM
ORDER BY EMAIL_ADDRESS,
		CATEGORY_NUM_2,
		EVENT_NM;
QUIT;



/**********************************************************************/
/************************* BUYER + NON_BUYER **************************/
/**********************************************************************/

/*SECOND_ON_PAGE, PAGE_VIEWS*/
DATA BR.CUSTOMER_PAGE_SESSION;
SET BR.FORD_BROWSE_PAGE_SUM
	BR.NONBUYER_BROWSE_PAGE_SUM;
RUN;

/*EVENT_CNTS*/
DATA BR.CUSTOMER_EVENT_SESSION;
SET BR.FORD_BROWSE_ALL_EVENT_SUM
	BR.nonbuyer_BROWSE_ALL_EVENT_SUM;
RUN;

PROC SQL;
CREATE TABLE BR.CUSTOMER_PAGE_SESSION AS
SELECT DISTINCT
		EMAIL_ADDRESS,
		CATEGORY_NUM_2,
		SEC_ON_PAGE,
		PAGE_VIEWS,
		BUYER_STATUS
FROM BR.CUSTOMER_PAGE_SESSION;
QUIT;

DATA BR.CUSTOMER_PAGE_SESSION;
SET BR.CUSTOMER_PAGE_SESSION;
FLAG=1;
RUN;

PROC SQL;
CREATE TABLE BR.CUSTOMER_EVENT_SESSION AS
SELECT DISTINCT
		EMAIL_ADDRESS,
		CATEGORY_NUM_2,
		EVENT_NM,
		EVENTS_CNTS
FROM BR.CUSTOMER_EVENT_SESSION;
QUIT;

DATA BR.CUSTOMER_EVENT_SESSION;
SET BR.CUSTOMER_EVENT_SESSION;
FLAG=1;
RUN;



/*SUPPRESS LOW-ENGAGED PAGE*/
PROC SORT DATA=BR.CUSTOMER_PAGE_SESSION; BY CATEGORY_NUM_2; RUN;
PROC UNIVARIATE DATA=BR.CUSTOMER_PAGE_SESSION;
BY CATEGORY_NUM_2;
VAR SEC_ON_PAGE;
OUTPUT OUT=BR.CUSTOMER_PAGE_SESSION_UNIV N=N NMISS=NMISS MIN=MIN MAX=MAX MEAN=MEAN STD=STD
PCTLPTS = 0 5 10 25 30 50 60 75 80 90 95 100 PCTLPRE=P_;
RUN;

PROC SQL;
CREATE TABLE BR.CUSTOMER_PAGE_SESSION AS
SELECT DISTINCT A.*, B.P_5
FROM BR.CUSTOMER_PAGE_SESSION A
LEFT JOIN BR.CUSTOMER_PAGE_SESSION_UNIV B
ON A.CATEGORY_NUM_2=B.CATEGORY_NUM_2;
QUIT;

DATA BR.CUSTOMER_PAGE_SESSION;
SET BR.CUSTOMER_PAGE_SESSION;
IF SEC_ON_PAGE < P_5 THEN DELETE;
RUN;

PROC SQL;
CREATE TABLE BR.CUSTOMER_PAGE_SESSION_YN AS
SELECT DISTINCT
	A.*,
	B.*
FROM BR.CUSTOMER_PAGE_SESSION A
LEFT JOIN BR.FORD_ONLINE_EML B
ON A.EMAIL_ADDRESS=B.EMAIL_ADDRESS;
QUIT;

DATA BR.CUSTOMER_PAGE_SESSION_YN;
SET BR.CUSTOMER_PAGE_SESSION_YN;
DROP FORD_DT;
RUN;

data BR.CUSTOMER_PAGE_SESSION_YN;                                                    
set BR.CUSTOMER_PAGE_SESSION_YN ;                                                            
  array testmiss(*)CAT_10--CAT_5;
  do i = 1 to dim(testmiss);                                              
    if testmiss(i)='' then testmiss(i)='N';
  end;                                                                    
run;


/*** EVENT ***/
PROC SQL;
CREATE TABLE BR.GOAL_MASTER AS
SELECT 
	EMAIL_ADDRESS,
	CATEGORY_NUM_2,
	EVENT_NM,
	SUM(FLAG) AS GOAL_SUM
FROM BR.CUSTOMER_EVENT_SESSION
GROUP BY 1,2,3;
QUIT;

/*PROC SQL; SELECT DISTINCT EVENT_NM FROM BR.GOAL_MASTER WHERE CATEGORY_NUM_2=9; QUIT;*/
DATA CUST_FORD_SESSION_CAT_ADD_FAV
CUST_FORD_SESSION_CAT_ADD_TB
CUST_FORD_SESSION_CAT_ALT_IMG
CUST_FORD_SESSION_CAT_COLOUR
CUST_FORD_SESSION_CAT_SIZE
CUST_FORD_SESSION_CAT_VIDEO
CUST_FORD_SESSION_CAT_LEFT_NAV
CUST_FORD_SESSION_CAT_TOP_NAV
CUST_FORD_SESSION_CAT_REFINE
;
SET BR.GOAL_MASTER;
IF EVENT_NM='ADD_FAV' THEN OUTPUT CUST_FORD_SESSION_CAT_ADD_FAV;
ELSE IF EVENT_NM='ADD_TB' THEN OUTPUT CUST_FORD_SESSION_CAT_ADD_TB;
ELSE IF EVENT_NM='ALT_IMG' THEN OUTPUT CUST_FORD_SESSION_CAT_ALT_IMG;
ELSE IF EVENT_NM='COLOUR' THEN OUTPUT CUST_FORD_SESSION_CAT_COLOUR;
ELSE IF EVENT_NM='SIZE' THEN OUTPUT CUST_FORD_SESSION_CAT_SIZE;
ELSE IF EVENT_NM='VIDEO' THEN OUTPUT CUST_FORD_SESSION_CAT_VIDEO;
ELSE IF EVENT_NM='LEFT_NA' THEN OUTPUT CUST_FORD_SESSION_CAT_LEFT_NAV;
ELSE IF EVENT_NM='TOP_NAV' THEN OUTPUT CUST_FORD_SESSION_CAT_TOP_NAV;
ELSE IF EVENT_NM='REFINE' THEN OUTPUT CUST_FORD_SESSION_CAT_REFINE
;
RUN;

%MACRO PROMOTION(TYPE);
PROC SORT DATA=CUST_FORD_SESSION_CAT_&TYPE. NODUPKEY; BY EMAIL_ADDRESS CATEGORY_NUM_2; RUN;

PROC TRANSPOSE DATA=CUST_FORD_SESSION_CAT_&TYPE.
OUT=CUST_FORD_SESSION_CAT_&TYPE._T PREFIX=&TYPE._;
BY EMAIL_ADDRESS;
ID CATEGORY_NUM_2 ;
VAR GOAL_SUM;
QUIT;
%MEND PROMOTION;

%PROMOTION(ADD_FAV);
%PROMOTION(ADD_TB);
%PROMOTION(ALT_IMG);
%PROMOTION(COLOUR);
%PROMOTION(SIZE);
%PROMOTION(VIDEO);
%PROMOTION(LEFT_NAV);
%PROMOTION(TOP_NAV);
%PROMOTION(REFINE);


%MACRO DROP_COL(TYPE);
DATA CUST_FORD_SESSION_CAT_&TYPE._T;
SET CUST_FORD_SESSION_CAT_&TYPE._T;
DROP _NAME_;
RUN;
%MEND DROP_COL;
%DROP_COL(ADD_FAV);
%DROP_COL(ADD_TB);
%DROP_COL(ALT_IMG);
%DROP_COL(COLOUR);
%DROP_COL(SIZE);
%DROP_COL(VIDEO);
%DROP_COL(LEFT_NAV);
%DROP_COL(TOP_NAV);
%DROP_COL(REFINE);


DATA BR.GOAL_MASTER(DROP=I);
MERGE CUST_FORD_SESSION_CAT_ADD_FAV_T(IN=A)
	  CUST_FORD_SESSION_CAT_ADD_TB_T(IN=B)
	  CUST_FORD_SESSION_CAT_ALT_IMG_T(IN=C)
	  CUST_FORD_SESSION_CAT_COLOUR_T(IN=D)
	  CUST_FORD_SESSION_CAT_SIZE_T(IN=E)
	  CUST_FORD_SESSION_CAT_VIDEO_T(IN=F)
	  CUST_FORD_SESSION_CAT_LEFT_NAV_T(IN=G)
	  CUST_FORD_SESSION_CAT_TOP_NAV_T(IN=H)
	  CUST_FORD_SESSION_CAT_REFINE_T(IN=I);
BY EMAIL_ADDRESS;
IF A OR B OR C OR D OR E OR F OR G OR H OR I;
RUN;


/*** WRAP UP ***/
DATA BR.CAT;
INFORMAT CAT_ORIG $2.;
FORMAT CAT_ORIG $2.;
INPUT CAT_ORIG ;
CARDS;
1
2
3
4
5
6
7
81
82
9
10
;
RUN;

PROC SORT DATA = BR.CAT; BY CAT_ORIG;RUN;

DATA BR.CAT;
SET BR.CAT END=EOF;              /* READ SAS DATASET */
BY CAT_ORIG ;                                          /* SORT SEQ */
IF FIRST.CAT_ORIG THEN DO;                    
      NUMMETRIC+1;                                     
      METRICS = 0;
END;
METRICS + 1;
IF LAST.CAT_ORIG THEN DO;                       /* EOF VENDOR, MAKE MAC VARS*/
      CALL SYMPUT('MCAT'||LEFT(PUT(NUMMETRIC,3.)),COMPRESS(CAT_ORIG));
      CALL SYMPUT('MMETRICS'||LEFT(PUT(NUMMETRIC,3.)),LEFT(METRICS));
END;
IF EOF THEN
      CALL SYMPUT('MTOTCT_CAT',COMPRESS(NUMMETRIC));                  /* MAC VAR NO DIF CTYS */
RUN;

%PUT *** MTOTCT_CAT=&MTOTCT_CAT;      


%MACRO LOOPTEST;                                
%DO I=1 %TO &MTOTCT_CAT;                                  /* LOOP THRU ALL VENDORS */
                  %PUT *** FILE = &&MCAT&I ILOOP &I OF &MTOTCT_CAT ; 
%END; 
%MEND LOOPTEST;                                       /* END OF MACRO */
%LOOPTEST   


/*some category not exist-->error message*/
/*5-7-9 MISS LEFT_NAV, TOP_NAV, REFINE*/
%MACRO SUBDATASET;
%DO I=1 %TO &MTOTCT_CAT;
DATA BR.CAT_&&MCAT&I.._DATASET;
SET BR.CUSTOMER_PAGE_SESSION_YN;
WHERE (CAT_&&MCAT&I..='Y') OR (BUYER_STATUS='NON' AND CAT_&&MCAT&I..='N');
KEEP EMAIL_ADDRESS BUYER_STATUS CAT_&&MCAT&I..;
RUN;

PROC SQL;
CREATE TABLE BR.CAT_&&MCAT&I.._DATASET AS
SELECT 	
	DISTINCT 
		A.Buyer_Status ,
		A.EMAIL_ADDRESS ,
		A.Cat_&&MCAT&I..,
		B.ADD_FAV_&&MCAT&I..,
		B.ADD_TB_&&MCAT&I..,
		B.ALT_IMG_&&MCAT&I..,
		B.COLOUR_&&MCAT&I..,
		B.SIZE_&&MCAT&I..,
		B.VIDEO_&&MCAT&I..
/*		B.LEFT_NAV_&&MCAT&I..,*/
/*		B.TOP_NAV_&&MCAT&I..,*/
/*		B.REFINE_&&MCAT&I..*/
FROM
	BR.CAT_&&MCAT&I.._DATASET A 
	LEFT JOIN BR.GOAL_MASTER B ON A.EMAIL_ADDRESS =B.EMAIL_ADDRESS ;
QUIT;


DATA BR.CAT_&&MCAT&I.._DATASET (DROP =I);
SET BR.CAT_&&MCAT&I.._DATASET;
  array testmiss(*)ADD_FAV_&&MCAT&I..--VIDEO_&&MCAT&I..;
  do i = 1 to dim(testmiss);                                              
    if testmiss(i)=. then testmiss(i)=0;
  end;                                                                    
RUN;

%END;
%MEND SUBDATASET;
%SUBDATASET;


DATA BR.CAT2;
INFORMAT CAT_ORIG $2.;
FORMAT CAT_ORIG $2.;
INPUT CAT_ORIG ;
CARDS;
1
2
3
4
6
81
82
10
;
RUN;

PROC SORT DATA = BR.CAT2; BY CAT_ORIG;RUN;

DATA BR.CAT2;
SET BR.CAT2 END=EOF;              /* READ SAS DATASET */
BY CAT_ORIG ;                                          /* SORT SEQ */
IF FIRST.CAT_ORIG THEN DO;                    
      NUMMETRIC+1;                                     
      METRICS = 0;
END;
METRICS + 1;
IF LAST.CAT_ORIG THEN DO;                       /* EOF VENDOR, MAKE MAC VARS*/
      CALL SYMPUT('MCAT'||LEFT(PUT(NUMMETRIC,3.)),COMPRESS(CAT_ORIG));
      CALL SYMPUT('MMETRICS'||LEFT(PUT(NUMMETRIC,3.)),LEFT(METRICS));
END;
IF EOF THEN
      CALL SYMPUT('MTOTCT_CAT',COMPRESS(NUMMETRIC));                  /* MAC VAR NO DIF CTYS */
RUN;

%PUT *** MTOTCT_CAT=&MTOTCT_CAT;      


%MACRO LOOPTEST;                                
%DO I=1 %TO &MTOTCT_CAT;                                  /* LOOP THRU ALL VENDORS */
                  %PUT *** FILE = &&MCAT&I ILOOP &I OF &MTOTCT_CAT ; 
%END; 
%MEND LOOPTEST;                                       /* END OF MACRO */
%LOOPTEST   


%MACRO SUBDATASET;
%DO I=1 %TO &MTOTCT_CAT;
PROC SQL;
CREATE TABLE BR.CAT_&&MCAT&I.._DATASET AS
SELECT 	
	DISTINCT 
		A.*,
		B.LEFT_NAV_&&MCAT&I..,
		B.TOP_NAV_&&MCAT&I..,
		B.REFINE_&&MCAT&I..
FROM
	BR.CAT_&&MCAT&I.._DATASET A 
	LEFT JOIN BR.GOAL_MASTER B ON A.EMAIL_ADDRESS =B.EMAIL_ADDRESS ;
QUIT;

DATA BR.CAT_&&MCAT&I.._DATASET (DROP =I);
SET BR.CAT_&&MCAT&I.._DATASET;
  array testmiss(*)LEFT_NAV_&&MCAT&I..--REFINE_&&MCAT&I..;
  do i = 1 to dim(testmiss);                                              
    if testmiss(i)=. then testmiss(i)=0;
  end;                                                                    
RUN;

%END;
%MEND SUBDATASET;
%SUBDATASET;


/*focus on all categories except for 5,7 and 9*/
DATA BR.PROMOGOAL;
INPUT PROMOGOAL $;
CARDS;
ADD_FAV
ADD_TB
ALT_IMG
COLOUR
SIZE
VIDEO
LEFT_NAV
TOP_NAV
REFINE
;
RUN;

PROC SORT DATA = BR.PROMOGOAL; BY PROMOGOAL;RUN;

DATA BR.PROMOGOAL;
SET BR.PROMOGOAL END=EOF;              /* READ SAS DATASET */
BY PROMOGOAL ;                                          /* SORT SEQ */
IF FIRST.PROMOGOAL THEN DO;                    
      NUMMETRIC+1;                                     
      METRICS = 0;
END;
METRICS + 1;
IF LAST.PROMOGOAL THEN DO;                       /* EOF VENDOR, MAKE MAC VARS*/
      CALL SYMPUT('MPROMO'||LEFT(PUT(NUMMETRIC,3.)),COMPRESS(PROMOGOAL));
      CALL SYMPUT('MMETRICS'||LEFT(PUT(NUMMETRIC,3.)),LEFT(METRICS));
END;
IF EOF THEN
      CALL SYMPUT('MTOTCT_PROMO',COMPRESS(NUMMETRIC));                  /* MAC VAR NO DIF CTYS */
RUN;

%PUT *** MTOTCT_PROMO=&MTOTCT_PROMO;      
%MACRO LOOPTEST;                                
%DO I=1 %TO &MTOTCT_PROMO;                                  /* LOOP THRU ALL VENDORS */
                  %PUT *** FILE = &&MPROMO&I ILOOP &I OF &MTOTCT_PROMO ; 
%END; 
%MEND LOOPTEST;                                       /* END OF MACRO */
%LOOPTEST   
%PUT &MTOTCT_PROMO;


%MACRO NORMALIZE;
%DO I=1 %TO &MTOTCT_CAT;
%DO J=1 %TO &MTOTCT_PROMO;

DATA &&MPROMO&J.._&&MCAT&I..;
SET BR.CAT_&&MCAT&I.._DATASET;
WHERE &&MPROMO&J.._&&MCAT&I.. NE 0;
KEEP EMAIL_ADDRESS &&MPROMO&J.._&&MCAT&I..;
RUN;

proc univariate data= &&MPROMO&J.._&&MCAT&I.. plot noprint;
var &&MPROMO&J.._&&MCAT&I..;
output out= &&MPROMO&J.._&&MCAT&I.._UNIV  n=n nmiss=nmiss min=min max=max mean=mean std=std 
pctlpts=0 25 30 50 60 75 80 85 90 95 100 pctlpre=p_ ;
run;

DATA &&MPROMO&J.._&&MCAT&I.._UNIV_REV;
SET &&MPROMO&J.._&&MCAT&I.._UNIV;
LENGTH CATEGORY $2. EVENT_TYPE $8.;
CATEGORY="&&MCAT&I..";
EVENT_TYPE="&&MPROMO&J..";
RUN;

PROC APPEND 
	BASE=BR.UNIV_MASTER_CATEGORY
	DATA=&&MPROMO&J.._&&MCAT&I.._UNIV_REV
	FORCE;
RUN;

PROC SQL;
CREATE TABLE  BR.CAT_&&MCAT&I.._DATASET AS 
SELECT
	DISTINCT 
		A.*, 
		CASE WHEN &&MPROMO&J.._&&MCAT&I.. =0 THEN 0
			 WHEN &&MPROMO&J.._&&MCAT&I.. <=(SELECT P_75 FROM &&MPROMO&J.._&&MCAT&I.._UNIV) THEN  &&MPROMO&J.._&&MCAT&I..
			 WHEN &&MPROMO&J.._&&MCAT&I.. >(SELECT P_75 FROM &&MPROMO&J.._&&MCAT&I.._UNIV) AND &&MPROMO&J.._&&MCAT&I.. <= (SELECT P_100 FROM &&MPROMO&J.._&&MCAT&I.._UNIV) THEN (SELECT P_75+1 FROM &&MPROMO&J.._&&MCAT&I.._UNIV)
		END AS &&MPROMO&J.._&&MCAT&I.._REV
FROM
	BR.CAT_&&MCAT&I.._DATASET A;
QUIT;

%END;
%END;
%MEND NORMALIZE;
%NORMALIZE;


%MACRO INDPCT;
%DO I=1 %TO &MTOTCT_CAT;
%DO J=1 %TO &MTOTCT_PROMO;
proc sql;
create table cat_&&MCAT&I.._dataset_&&MPROMO&J.._&&MCAT&I.. as
SELECT DISTINCT A.*, B.* , SUB_EMLS/TTL_EMLS AS &&MPROMO&J.._PCT
FROM 
	(SELECT 
		distinct cat_&&MCAT&I..,
		&&MPROMO&J.._&&MCAT&I.._REV,
	 	count(distinct EMAIL_ADDRESS) AS TTL_EMLS
	FROM
		BR.CAT_&&MCAT&I.._DATASET
	GROUP BY 
	 	1) A INNER JOIN 
	(select 	
		distinct cat_&&MCAT&I..,
		&&MPROMO&J.._&&MCAT&I.._REV,
	 	count(distinct EMAIL_ADDRESS) AS SUB_EMLS
	FROM
		BR.CAT_&&MCAT&I.._DATASET
	GROUP BY 
	 1,2) B ON A.CAT_&&MCAT&I..=B.CAT_&&MCAT&I.. AND A.&&MPROMO&J.._&&MCAT&I.._REV=B.&&MPROMO&J.._&&MCAT&I.._REV;
QUIT;

PROC SORT DATA=CAT_&&MCAT&I.._DATASET_&&MPROMO&J.._&&MCAT&I..;BY &&MPROMO&J.._&&MCAT&I.._REV; RUN;
PROC TRANSPOSE DATA=CAT_&&MCAT&I.._DATASET_&&MPROMO&J.._&&MCAT&I.. PREFIX=&&MPROMO&J.._&&MCAT&I.._ OUT= CAT_&&MCAT&I.._DATASET_&&MPROMO&J.._&&MCAT&I.._T;
BY &&MPROMO&J.._&&MCAT&I.._REV;
ID CAT_&&MCAT&I..;
VAR &&MPROMO&J.._PCT;
RUN;

DATA CAT_&&MCAT&I.._DATASET_&&MPROMO&J.._&&MCAT&I..;
SET CAT_&&MCAT&I.._DATASET_&&MPROMO&J.._&&MCAT&I..;
DROP _NAME_;
RUN;

PROC SQL;
CREATE TABLE  BR.CAT_&&MCAT&I.._DATASET AS 
SELECT
	DISTINCT A.*, B. *
FROM
	BR.CAT_&&MCAT&I.._DATASET A LEFT JOIN CAT_&&MCAT&I.._DATASET_&&MPROMO&J.._&&MCAT&I.._T B 
ON A.&&MPROMO&J.._&&MCAT&I.._REV =B.&&MPROMO&J.._&&MCAT&I.._REV 
;
QUIT;
%END;
%END;
%MEND INDPCT;
%INDPCT;

%MACRO PYPN;
%DO I=1 %TO &MTOTCT_CAT;
PROC SQL;
CREATE TABLE CAT_&&MCAT&I.._Y_N AS
SELECT DISTINCT 
	A.*, 
	B.*, 
	EMLS/TTL_EMLS AS Y_N_PCT
FROM
(SELECT DISTINCT CAT_&&MCAT&I.., COUNT(DISTINCT EMAIL_ADDRESS) AS TTL_EMLS  
FROM BR.CAT_&&MCAT&I.._DATASET) A
INNER JOIN 
(SELECT DISTINCT CAT_&&MCAT&I.., COUNT(DISTINCT EMAIL_ADDRESS) AS EMLS 
FROM BR.CAT_&&MCAT&I.._DATASET GROUP BY 1) B 
ON A.CAT_&&MCAT&I..=B.CAT_&&MCAT&I..;
QUIT;

PROC SQL;SELECT Y_N_PCT INTO: Y_PCT_CAT FROM CAT_&&MCAT&I.._Y_N WHERE CAT_&&MCAT&I..='Y' ;QUIT;
PROC SQL;SELECT Y_N_PCT INTO: N_PCT_CAT FROM CAT_&&MCAT&I.._Y_N WHERE CAT_&&MCAT&I..='N'; QUIT;
%PUT &Y_PCT_CAT.;
%PUT &N_PCT_CAT.;


DATA BR.CAT_&&MCAT&I.._DATASET;
SET  BR.CAT_&&MCAT&I.._DATASET;
P_Y_CAT_&&MCAT&I..=
	(ADD_FAV_&&MCAT&I.._Y * ADD_TB_&&MCAT&I.._Y * ALT_IMG_&&MCAT&I.._Y * COLOUR_&&MCAT&I.._Y  
	* SIZE_&&MCAT&I.._Y * VIDEO_&&MCAT&I.._Y * LEFT_NAV_&&MCAT&I.._Y 
	* TOP_NAV_&&MCAT&I.._Y * REFINE_&&MCAT&I.._Y  )* &Y_PCT_CAT.;
P_N_CAT_&&MCAT&I..=
	(ADD_FAV_&&MCAT&I.._N * ADD_TB_&&MCAT&I.._N * ALT_IMG_&&MCAT&I.._N * COLOUR_&&MCAT&I.._N  
	* SIZE_&&MCAT&I.._N * VIDEO_&&MCAT&I.._N * LEFT_NAV_&&MCAT&I.._N 
	* TOP_NAV_&&MCAT&I.._N * REFINE_&&MCAT&I.._N )* &N_PCT_CAT.;
RUN;

DATA BR.CAT_&&MCAT&I.._DATASET;
SET  BR.CAT_&&MCAT&I.._DATASET;
P_Y_CAT_&&MCAT&I.._REV=P_Y_CAT_&&MCAT&I../(P_Y_CAT_&&MCAT&I..+P_N_CAT_&&MCAT&I..);
P_N_CAT_&&MCAT&I.._REV=P_N_CAT_&&MCAT&I../(P_Y_CAT_&&MCAT&I..+P_N_CAT_&&MCAT&I..);
RUN;

DATA BR.CAT_&&MCAT&I.._DATASET;
SET  BR.CAT_&&MCAT&I.._DATASET;
IF P_Y_CAT_&&MCAT&I.._REV>=0.5 THEN CAT_&&MCAT&I.._PRED='Y';
IF P_Y_CAT_&&MCAT&I.._REV<0.5 THEN CAT_&&MCAT&I.._PRED='N';
RUN;

PROC FREQ DATA=BR.CAT_&&MCAT&I.._DATASET;
TABLE CAT_&&MCAT&I.. *CAT_&&MCAT&I.._PRED;
RUN;

DATA BR.CAT_&&MCAT&I.._DATASET_PY;
SET BR.CAT_&&MCAT&I.._DATASET;
KEEP EMAIL_ADDRESS P_Y_CAT_&&MCAT&I.._REV;
RUN;

PROC SORT DATA=BR.CAT_&&MCAT&I.._DATASET_PY;BY EMAIL_ADDRESS;RUN;

%END;
%MEND PYPN;
%PYPN;



/************* For category 5,7 & 9 -- drop left_nav, top_nav, refine *************/
DATA BR.PROMOGOAL2;
INPUT PROMOGOAL $;
CARDS;
ADD_FAV
ADD_TB
ALT_IMG
COLOUR
SIZE
VIDEO
;
RUN;

PROC SORT DATA = BR.PROMOGOAL2; BY PROMOGOAL;RUN;

DATA BR.PROMOGOAL2;
SET BR.PROMOGOAL2 END=EOF;              /* READ SAS DATASET */
BY PROMOGOAL ;                                          /* SORT SEQ */
IF FIRST.PROMOGOAL THEN DO;                    
      NUMMETRIC+1;                                     
      METRICS = 0;
END;
METRICS + 1;
IF LAST.PROMOGOAL THEN DO;                       /* EOF VENDOR, MAKE MAC VARS*/
      CALL SYMPUT('MPROMO'||LEFT(PUT(NUMMETRIC,3.)),COMPRESS(PROMOGOAL));
      CALL SYMPUT('MMETRICS'||LEFT(PUT(NUMMETRIC,3.)),LEFT(METRICS));
END;
IF EOF THEN
      CALL SYMPUT('MTOTCT_PROMO',COMPRESS(NUMMETRIC));                  /* MAC VAR NO DIF CTYS */
RUN;

%PUT *** MTOTCT_PROMO=&MTOTCT_PROMO;      
%MACRO LOOPTEST;                                
%DO I=1 %TO &MTOTCT_PROMO;                                  /* LOOP THRU ALL VENDORS */
                  %PUT *** FILE = &&MPROMO&I ILOOP &I OF &MTOTCT_PROMO ; 
%END; 
%MEND LOOPTEST;                                       /* END OF MACRO */
%LOOPTEST   
%PUT &MTOTCT_PROMO;


DATA BR.CAT3;
INFORMAT CAT_ORIG $2.;
FORMAT CAT_ORIG $2.;
INPUT CAT_ORIG ;
CARDS;
5
7
9
;
RUN;

PROC SORT DATA = BR.CAT3; BY CAT_ORIG;RUN;

DATA BR.CAT3;
SET BR.CAT3 END=EOF;              /* READ SAS DATASET */
BY CAT_ORIG ;                                          /* SORT SEQ */
IF FIRST.CAT_ORIG THEN DO;                    
      NUMMETRIC+1;                                     
      METRICS = 0;
END;
METRICS + 1;
IF LAST.CAT_ORIG THEN DO;                       /* EOF VENDOR, MAKE MAC VARS*/
      CALL SYMPUT('MCAT'||LEFT(PUT(NUMMETRIC,3.)),COMPRESS(CAT_ORIG));
      CALL SYMPUT('MMETRICS'||LEFT(PUT(NUMMETRIC,3.)),LEFT(METRICS));
END;
IF EOF THEN
      CALL SYMPUT('MTOTCT_CAT',COMPRESS(NUMMETRIC));                  /* MAC VAR NO DIF CTYS */
RUN;

%PUT *** MTOTCT_CAT=&MTOTCT_CAT;      

%MACRO LOOPTEST;                                
%DO I=1 %TO &MTOTCT_CAT;                                  /* LOOP THRU ALL VENDORS */
                  %PUT *** FILE = &&MCAT&I ILOOP &I OF &MTOTCT_CAT ; 
%END; 
%MEND LOOPTEST;                                       /* END OF MACRO */
%LOOPTEST   


%MACRO NORMALIZE;
%DO I=1 %TO &MTOTCT_CAT;
%DO J=1 %TO &MTOTCT_PROMO;

DATA &&MPROMO&J.._&&MCAT&I..;
SET BR.CAT_&&MCAT&I.._DATASET;
WHERE &&MPROMO&J.._&&MCAT&I.. NE 0;
KEEP EMAIL_ADDRESS &&MPROMO&J.._&&MCAT&I..;
RUN;

proc univariate data= &&MPROMO&J.._&&MCAT&I.. plot noprint;
var &&MPROMO&J.._&&MCAT&I..;
output out= &&MPROMO&J.._&&MCAT&I.._UNIV  n=n nmiss=nmiss min=min max=max mean=mean std=std 
pctlpts=0 25 30 50 60 75 80 85 90 95 100 pctlpre=p_ ;
run;

DATA &&MPROMO&J.._&&MCAT&I.._UNIV_REV;
SET &&MPROMO&J.._&&MCAT&I.._UNIV;
LENGTH CATEGORY $2. EVENT_TYPE $8.;
CATEGORY="&&MCAT&I..";
EVENT_TYPE="&&MPROMO&J..";
RUN;

PROC APPEND 
	BASE=BR.UNIV_MASTER_CATEGORY
	DATA=&&MPROMO&J.._&&MCAT&I.._UNIV_REV
	FORCE;
RUN;

PROC SQL;
CREATE TABLE  BR.CAT_&&MCAT&I.._DATASET AS 
SELECT
	DISTINCT 
		A.*, 
		CASE WHEN &&MPROMO&J.._&&MCAT&I.. =0 THEN 0
			 WHEN &&MPROMO&J.._&&MCAT&I.. <=(SELECT P_75 FROM &&MPROMO&J.._&&MCAT&I.._UNIV) THEN  &&MPROMO&J.._&&MCAT&I..
			 WHEN &&MPROMO&J.._&&MCAT&I.. >(SELECT P_75 FROM &&MPROMO&J.._&&MCAT&I.._UNIV) AND &&MPROMO&J.._&&MCAT&I.. <= (SELECT P_100 FROM &&MPROMO&J.._&&MCAT&I.._UNIV) THEN (SELECT P_75+1 FROM &&MPROMO&J.._&&MCAT&I.._UNIV)
		END AS &&MPROMO&J.._&&MCAT&I.._REV
FROM
	BR.CAT_&&MCAT&I.._DATASET A;
QUIT;

%END;
%END;
%MEND NORMALIZE;
%NORMALIZE;


%MACRO INDPCT;
%DO I=1 %TO &MTOTCT_CAT;
%DO J=1 %TO &MTOTCT_PROMO;
proc sql;
create table cat_&&MCAT&I.._dataset_&&MPROMO&J.._&&MCAT&I.. as
SELECT DISTINCT A.*, B.* , SUB_EMLS/TTL_EMLS AS &&MPROMO&J.._PCT
FROM 
	(SELECT 
		distinct cat_&&MCAT&I..,
		&&MPROMO&J.._&&MCAT&I.._REV,
	 	count(distinct EMAIL_ADDRESS) AS TTL_EMLS
	FROM
		BR.CAT_&&MCAT&I.._DATASET
	GROUP BY 
	 	1) A INNER JOIN 
	(select 	
		distinct cat_&&MCAT&I..,
		&&MPROMO&J.._&&MCAT&I.._REV,
	 	count(distinct EMAIL_ADDRESS) AS SUB_EMLS
	FROM
		BR.CAT_&&MCAT&I.._DATASET
	GROUP BY 
	 1,2) B ON A.CAT_&&MCAT&I..=B.CAT_&&MCAT&I.. AND A.&&MPROMO&J.._&&MCAT&I.._REV=B.&&MPROMO&J.._&&MCAT&I.._REV;
QUIT;

PROC SORT DATA=CAT_&&MCAT&I.._DATASET_&&MPROMO&J.._&&MCAT&I..;BY &&MPROMO&J.._&&MCAT&I.._REV; RUN;
PROC TRANSPOSE DATA=CAT_&&MCAT&I.._DATASET_&&MPROMO&J.._&&MCAT&I.. PREFIX=&&MPROMO&J.._&&MCAT&I.._ OUT= CAT_&&MCAT&I.._DATASET_&&MPROMO&J.._&&MCAT&I.._T;
BY &&MPROMO&J.._&&MCAT&I.._REV;
ID CAT_&&MCAT&I..;
VAR &&MPROMO&J.._PCT;
RUN;

DATA CAT_&&MCAT&I.._DATASET_&&MPROMO&J.._&&MCAT&I..;
SET CAT_&&MCAT&I.._DATASET_&&MPROMO&J.._&&MCAT&I..;
DROP _NAME_;
RUN;

PROC SQL;
CREATE TABLE  BR.CAT_&&MCAT&I.._DATASET AS 
SELECT
	DISTINCT A.*, B. *
FROM
	BR.CAT_&&MCAT&I.._DATASET A LEFT JOIN CAT_&&MCAT&I.._DATASET_&&MPROMO&J.._&&MCAT&I.._T B 
ON A.&&MPROMO&J.._&&MCAT&I.._REV =B.&&MPROMO&J.._&&MCAT&I.._REV 
;
QUIT;
%END;
%END;
%MEND INDPCT;
%INDPCT;

%PUT &MTOTCT_CAT;

%MACRO PYPN;
%DO I=1 %TO &MTOTCT_CAT;
PROC SQL;
CREATE TABLE CAT_&&MCAT&I.._Y_N AS
SELECT DISTINCT 
	A.*, 
	B.*, 
	EMLS/TTL_EMLS AS Y_N_PCT
FROM
(SELECT DISTINCT CAT_&&MCAT&I.., COUNT(DISTINCT EMAIL_ADDRESS) AS TTL_EMLS  
FROM BR.CAT_&&MCAT&I.._DATASET) A
INNER JOIN 
(SELECT DISTINCT CAT_&&MCAT&I.., COUNT(DISTINCT EMAIL_ADDRESS) AS EMLS 
FROM BR.CAT_&&MCAT&I.._DATASET GROUP BY 1) B 
ON A.CAT_&&MCAT&I..=B.CAT_&&MCAT&I..;
QUIT;

PROC SQL;SELECT Y_N_PCT INTO: Y_PCT_CAT FROM CAT_&&MCAT&I.._Y_N WHERE CAT_&&MCAT&I..='Y' ;QUIT;
PROC SQL;SELECT Y_N_PCT INTO: N_PCT_CAT FROM CAT_&&MCAT&I.._Y_N WHERE CAT_&&MCAT&I..='N'; QUIT;
%PUT &Y_PCT_CAT.;
%PUT &N_PCT_CAT.;


DATA BR.CAT_&&MCAT&I.._DATASET;
SET  BR.CAT_&&MCAT&I.._DATASET;
P_Y_CAT_&&MCAT&I..=
	(ADD_FAV_&&MCAT&I.._Y * ADD_TB_&&MCAT&I.._Y * ALT_IMG_&&MCAT&I.._Y * COLOUR_&&MCAT&I.._Y  
	* SIZE_&&MCAT&I.._Y * VIDEO_&&MCAT&I.._Y )* &Y_PCT_CAT.;
P_N_CAT_&&MCAT&I..=
	(ADD_FAV_&&MCAT&I.._N * ADD_TB_&&MCAT&I.._N * ALT_IMG_&&MCAT&I.._N * COLOUR_&&MCAT&I.._N  
	* SIZE_&&MCAT&I.._N * VIDEO_&&MCAT&I.._N  )* &N_PCT_CAT.;
RUN;

DATA BR.CAT_&&MCAT&I.._DATASET;
SET  BR.CAT_&&MCAT&I.._DATASET;
P_Y_CAT_&&MCAT&I.._REV=P_Y_CAT_&&MCAT&I../(P_Y_CAT_&&MCAT&I..+P_N_CAT_&&MCAT&I..);
P_N_CAT_&&MCAT&I.._REV=P_N_CAT_&&MCAT&I../(P_Y_CAT_&&MCAT&I..+P_N_CAT_&&MCAT&I..);


DATA BR.CAT_&&MCAT&I.._DATASET;
SET  BR.CAT_&&MCAT&I.._DATASET;
IF P_Y_CAT_&&MCAT&I.._REV>=0.5 THEN CAT_&&MCAT&I.._PRED='Y';
IF P_Y_CAT_&&MCAT&I.._REV<0.5 THEN CAT_&&MCAT&I.._PRED='N';
RUN;

PROC FREQ DATA=BR.CAT_&&MCAT&I.._DATASET;
TABLE CAT_&&MCAT&I.. *CAT_&&MCAT&I.._PRED;
RUN;

DATA BR.CAT_&&MCAT&I.._DATASET_PY;
SET BR.CAT_&&MCAT&I.._DATASET;
KEEP EMAIL_ADDRESS P_Y_CAT_&&MCAT&I.._REV;
RUN;

PROC SORT DATA=BR.CAT_&&MCAT&I.._DATASET_PY;BY EMAIL_ADDRESS;RUN;

RUN;
%END;
%MEND PYPN;
%PYPN;




/************************* FINAL STEP *************************/
DATA BR.CAT_PY_MASTER;
MERGE BR.CAT_1_DATASET_PY(IN=A)
	  BR.CAT_2_DATASET_PY(IN=B)
	  BR.CAT_3_DATASET_PY(IN=C)
	  BR.CAT_4_DATASET_PY(IN=D)
	  BR.CAT_5_DATASET_PY(IN=E)
	  BR.CAT_6_DATASET_PY(IN=F)
	  BR.CAT_7_DATASET_PY(IN=G)
	  BR.CAT_81_DATASET_PY(IN=H)
	  BR.CAT_82_DATASET_PY(IN=I)
	  BR.CAT_9_DATASET_PY(IN=J)
	  BR.CAT_10_DATASET_PY(IN=K);
BY EMAIL_ADDRESS;
IF A OR B OR C OR D OR E OR F OR G OR H OR I OR J OR K;
RUN;

DATA BR.CAT_PY_MASTER;
SET BR.CAT_PY_MASTER;
IF P_Y_CAT_81_REV NE . AND P_Y_CAT_82_REV NE . THEN DO;
	IF P_Y_CAT_81_REV  > = P_Y_CAT_82_REV THEN DO;
		P_Y_CAT_82_REV=.;
	END;
	ELSE IF P_Y_CAT_81_REV  < P_Y_CAT_82_REV THEN DO;
		P_Y_CAT_81_REV=.;
	END;

END;
RUN;

DATA BR.CAT_PY_MASTER;
SET BR.CAT_PY_MASTER;
array arr(*)P_Y_CAT_1_REV--P_Y_CAT_10_REV;
	NUMMISS=CMISS(of arr(*));
	do i = 1 to dim(arr);                                              
    if arr(i)=. then arr(i)=0;
  end;                                                                    
	P1 = COMPRESS(SUBSTR(vname(arr[whichn(max(of arr(*)), of arr(*))]),9 ,2),'_');
RUN;

DATA BR.CROSSSHOP_MAP;
FORMAT P1 $2.;
FORMAT CS1 $2.;
FORMAT CS2 $2.;
INPUT P1 $ CS1 $ CS2 $;
CARDS;
3 9 8
2 9 3
9 2 3
81 3 2
82 3 2
10 8 3
1 10 8
6 5 4
5 8 2
4 5 10
7 10 8
;
RUN;

PROC SQL;
CREATE TABLE BR.CAT_PY_MASTER AS
SELECT DISTINCT A.*, B.CS1, B.CS2 
FROM BR.CAT_PY_MASTER A LEFT JOIN BR.CROSSSHOP_MAP B  ON A.P1=B.P1;
QUIT;

DATA BR.CAT_PY_MASTER_CS_2
	 BR.CAT_PY_MASTER_CS_1
	 BR.CAT_PY_MASTER_CS_NO;
SET BR.CAT_PY_MASTER;
IF NUMMISS =10 THEN OUTPUT BR.CAT_PY_MASTER_CS_2 ;
IF NUMMISS =9 THEN OUTPUT BR.CAT_PY_MASTER_CS_1 ;
IF NUMMISS <=8 THEN OUTPUT BR.CAT_PY_MASTER_CS_NO ;
RUN;


DATA BR.CAT_PY_MASTER_CS_NO;
SET BR.CAT_PY_MASTER_CS_NO;
array arr(*)P_Y_CAT_1_REV--P_Y_CAT_10_REV;
	P2 = COMPRESS(SUBSTR(vname(arr[whichn(LARGEST(2,of arr(*)), of arr(*))]),9 ,2),'_');
	P3 = COMPRESS(SUBSTR(vname(arr[whichn(LARGEST(3,of arr(*)), of arr(*))]),9 ,2),'_');
CS_FLAG=0;
RUN;

DATA BR.CAT_PY_MASTER_CS_1;
SET BR.CAT_PY_MASTER_CS_1;
array arr(*)P_Y_CAT_1_REV--P_Y_CAT_10_REV;
	P2 = COMPRESS(SUBSTR(vname(arr[whichn(LARGEST(2,of arr(*)), of arr(*))]),9 ,2),'_');
IF CS1 NE P2 THEN P3=CS1;
IF CS1 = P2 THEN P3=CS2;
CS_FLAG=1;CS_FLAG=1;
RUN;

DATA BR.CAT_PY_MASTER_CS_2;
SET BR.CAT_PY_MASTER_CS_2;
P2=CS1;
P3=CS2;
CS_FLAG=1;CS_FLAG=2;
RUN;

DATA BR.BROWSE_SEGMENTATION_FILE;
SET BR.CAT_PY_MASTER_CS_NO(KEEP=EMAIL_ADDRESS P1 P2 P3 CS_FLAG )
	BR.CAT_PY_MASTER_CS_1(KEEP=EMAIL_ADDRESS P1 P2 P3 CS_FLAG )
	BR.CAT_PY_MASTER_CS_2(KEEP=EMAIL_ADDRESS P1 P2 P3  CS_FLAG);
RUN;

DATA DUPLICATE  ;
SET BR.BROWSE_SEGMENTATION_FILE;
WHERE P1=P2 OR P1=P3 OR P2=P3;
RUN;


PROC SQL;
CREATE TABLE BR.BROWSE_SEGMENTATION_FILE AS
SELECT
	DISTINCT 
		A.EMAIL_aDDRESS,
		A.P1,
		A.P2,
		A.P3,
		A.CS_FLAG
		
FROM
	BR.BROWSE_SEGMENTATION_FILE A;
QUIT;

proc sql;
create table BR.BROWSE_SEGMENTATION_CT AS
SELECT DISTINCT P1, COUNT(DISTINCT EMAIL_ADDRESS) AS EMLS
FROM BR.BROWSE_SEGMENTATION_FILE 
GROUP BY 1
ORDER BY CALCULATED EMLS DESC;
QUIT;



/** MODEL FINISHED **/
/*************** QA WITH CXT DATA ***************/
/*libname trial 'M:\Fanli\CXT\trial';*/

/*PROC SQL;*/
/*CREATE TABLE BR.BROWSE_SEGMENTATION_FILE_NEW AS*/
/*SELECT*/
/*	DISTINCT */
/*		A.EMAIL_aDDRESS,*/
/*		A.P1 AS P1_NEW,*/
/*		A.P2 AS P2_NEW,*/
/*		A.P3 AS P3_NEW		*/
/*FROM*/
/*	BR.BROWSE_SEGMENTATION_FILE A;*/
/*QUIT;*/
/**/
/*PROC SORT DATA=BR.BROWSE_SEGMENTATION_FILE_NEW; BY EMAIL_ADDRESS; RUN; /*1783288*/*/
/*PROC SORT DATA=TRIAL.BROWSE_SEGMENTATION_FILE; BY EMAIL_ADDRESS; RUN;  /*1987551*/*/

DATA BR.OVERLAP;
/*MERGE BR.BROWSE_SEGMENTATION_FILE_NEW(IN=A) TRIAL.BROWSE_SEGMENTATION_FILE(IN=B);*/
/*BY EMAIL_ADDRESS;*/
/*IF A AND B;*/
/*RUN;*/
/*486602 = 25%*/

/*DATA CHECK;*/
/*SET TRIAL.BROWSE_SEGMENTATION_FILE;*/
/*IF P1 NE BP1;*/
/*RUN;*/
/**/
/*DATA BR.OVERLAP_NE;*/
/*SET BR.OVERLAP;*/
/*IF P1_NEW NE P1;*/
/*RUN;*/
/*268554 = 55%*/


